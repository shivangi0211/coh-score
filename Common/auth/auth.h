#ifndef _AUTH_H
#define _AUTH_H

#include "stdtypes.h"
#include "authconn.h"

// These values are duplicated in AuthServer/src/AuthServer/Config.h
#define USA_AUTH_PROTOCOL_VERSION			30206	// version of the auth used in us/europe production coh from 2004/4/28 - ???
#define ASIA_AUTH_PROTOCOL_VERSION			30207	// version of the auth used in asia
#define GLOBAL_AUTH_PROTOCOL_VERSION		30810	// version used for worldwide release
#define GR_REACTIVATION_PROTOCOL_VERSION	100903	// First version to support GR reactivation

typedef struct
{
	U16		length;
	U8		data[1000];
	int		bytesRead;
} AuthPacket;

#define AUTH_SIZE_MAX (((1<<14)/2)-1)	//so Auth server treats any number (1<<14) or bigger as being zero.  So we're saying that you
										//can't have a max size > 1<<13-1 so that you can have 1<<13 available for the queue.

// This must match MAX_USERDATA in protocol.h
#define	AUTH_BYTES			128							// Number of auth bytes.
#define	AUTH_DWORDS			(AUTH_BYTES / sizeof(U32))	// Number of auth DWORDS.

// This must match MAX_USERDATA_ORIG in protocol.h
#define	AUTH_BYTES_ORIG		16							// Original number of auth bytes.
#define	AUTH_DWORDS_ORIG	(AUTH_BYTES_ORIG / sizeof(U32))	// Original number of auth DWORDS.

// Generated by mkproto
#if CLIENT
int authGetPacket(AuthPacket *pak);
#else
int authGetPacket(AuthPacket *pak);
#endif
int authSendPacket(AuthPacket *pak);
int authGetU08(AuthPacket *pak);
int authGetU16(AuthPacket *pak);
int authGetU32(AuthPacket *pak);
char *authGetStr(AuthPacket *pak);
void *authGetArray(AuthPacket *pak,void *data,int len);
void authPutArray(AuthPacket *pak,void *data,int len);
void authPutU08(AuthPacket *pak,U8 val);
void authPutU16(AuthPacket *pak,U16 val);
void authPutU32(AuthPacket *pak,U32 val);
void authPutStr(AuthPacket *pak,char *str);
int authSocket();
AuthPacket *authAllocPacket(int type);
int authConnect(char *ip_name,int port);
void authDisconnect();
void authSetKey(U32 key,int set_global_auth);
void authFakeIt();
U32 authGetKey();
void authEncryptLineage2(const char * original, char * encoded, unsigned int encodeBlock);
int authIsGlobalAuth();
int authSocketOk();

// End mkproto
#endif
