#ifndef _PLAYER_H
#define _PLAYER_H

#include "stdtypes.h"

#define PUT_PLAYER_INTO_GAME  0
#define PUT_PLAYER_INTO_SHELL 1

#define PLAYER_IS_IN_UNKNOWN (1 << 0)
#define PLAYER_IS_IN_GAME	 (1 << 1)
#define PLAYER_IS_IN_SHELL	 (1 << 2)

typedef struct Entity Entity;
typedef struct Packet Packet;

typedef enum {
	MOUSEPITCH_FREE,
	MOUSEPITCH_SPRING,
	MOUSEPITCH_FIXED,
} MousePitchOption;

// Generated by mkproto
Entity *playerPtr(void);
Entity *ownedPlayerPtr(void);
Entity* controlledPlayerPtr(void);
Entity *playerPtrForShell(int alloc);
void setPlayerPtrForShell(Entity *e);
void setMySlave(Entity* slave, Packet* pak, int control);
Entity* getMySlave(void);
void setPlayerIsSlave(int set);
int playerIsSlave(void);
void setPCCEditingMode(int mode);
int getPCCEditingMode();
void playerSetPos(Vec3 pos);
void playerSetMat3(Mat3 mat);
void playerHide(int hide);
void playerUpdateInput(Vec3 vel);
void playerGetPos(Vec3 pos);
void playerNoColl(int nocoll);
void playerOrient(void);
void setPlayerFacing(Entity * target, F32 time_to_arrive_at_correct_facing );
void setPlayerFacingLocation(Vec3 vecTarget, F32 time_to_arrive_at_correct_facing );
void playerSetEnt(Entity *e);
void playerResetControlState(void);
void playerGetInput(void);
void playerTurn(F32 ticks);
F32 playerTurn_GetTicks();
float playerHeight(void);
void playerReceiveControlState(Packet *pak);
// End mkproto
//mm switch

#endif
