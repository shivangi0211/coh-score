#ifndef _ENTSEND_H
#define _ENTSEND_H

#include "gametypes.h"

#define MAX_DELETES MAX_ENTITIES_PRIVATE

extern int			ent_deletes[MAX_DELETES];
extern int			ent_delete_ids[MAX_DELETES];
extern int			ent_delete_count;

typedef struct NetFx NetFx;
typedef struct NetLink NetLink;

typedef struct
{
	U32		sent_ids[(MAX_ENTITIES_PRIVATE+31)/32];	// bitfield to track which server ents this client knows about
	int		namecount_sent;			// highest idx of the gfx nametable sent to this client
} EntNetLink;

typedef struct InterpState {
	int store_entity_id;
	Vec3 last_pos;
	Vec3 interp_positions[7];
	Vec3 guess_pos[7];
} InterpState;

extern InterpState interp_state;

// Generated by mkproto
void *createEntNetLink(void);
void destroyEntNetLink(EntNetLink *data);
U32 entAddFx(Entity *e, NetFx *netfx);
int entAddFxByName(Entity * e, const char * name, U32 command);
int entDelFxByNetId(Entity *e,U32 net_id);
int entDelFxByName(Entity * e, const char * name);
int entSetTriggeredMove(Entity *e, U32 * added_state, int ticks, int triggerFxNetId );
void entSendSetInterpStoreEntityId(int id);
int entSendGetInterpStoreEntityId();
void entSendSetNetPositionAndOrientation(Entity* e);
void entPrepareUpdate();
void entFinishUpdate();
void entSendUpdate(NetLink *link,Entity *player_ent,int re_predict,int full_update,int tick_number);
void sendEntityInfo( Entity *e, int svr_id, int tab );
// End mkproto


extern int entsend_frames;
#endif
