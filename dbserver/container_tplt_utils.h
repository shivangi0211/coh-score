#ifndef _CONTAINER_TPLT_UTILS_H
#define _CONTAINER_TPLT_UTILS_H

C_DECLARATIONS_BEGIN

typedef struct StashTableImp *StashTable;
typedef const struct StashTableImp *cStashTable;
typedef void* HSTMT;

#define MAX_QUERY_SIZE 524288
#define MAX_QUERY_RESULTS 2048
#define CONTAINER_TEXT_INITIAL_SIZE 8192

enum ContainerFieldType
{
	CFTYPE_NULL,

	// Unquoted types
	CFTYPE_BYTE,
	CFTYPE_SHORT,
	CFTYPE_INT,
	CFTYPE_FLOAT,

	// Quoted types
	CFTYPE_UNICODESTRING,
	CFTYPE_ANSISTRING,
	CFTYPE_DATETIME,
	CFTYPE_BINARY_MAX,
	CFTYPE_UNICODESTRING_MAX,
	CFTYPE_ANSISTRING_MAX,

	// Deprecated types
	CFTYPE_TEXTBLOB,
	CFTYPE_BLOB,
	CFTYPE_COUNT
} ContainerFieldType;

#define FIRST_QUOTED_TYPE CFTYPE_UNICODESTRING

#define CFTYPE_IS_ARRAY(_e) ((_e) == CFTYPE_UNICODESTRING || (_e) == CFTYPE_ANSISTRING)
#define CFTYPE_IS_LEGACY(_e) ((_e) == CFTYPE_TEXTBLOB || (_e) == CFTYPE_BLOB)
#define CFTYPE_IS_DYNAMIC(_e) ((_e) == CFTYPE_BINARY_MAX || (_e) == CFTYPE_UNICODESTRING_MAX || (_e) == CFTYPE_ANSISTRING_MAX || CFTYPE_IS_LEGACY(_e))

typedef struct
{
	char	*field;
	char	*value;
} ContainerLine;

typedef struct
{
	char			*data;
	int				data_max;
	StashTable		hash_table;
	ContainerLine	*lines;
	int				max_lines;
	int				count;
} IndexedContainer;

typedef struct
{
	char	*buf;
	int		table_idx;
	int		last_table_idx;
	char	*idx_name;
	char	*table;
	char	*field;
	char	*value;
	char	*curr;
	char	last_table[128];
	char	*args[100];
	int		count;
} CtnrLineState;

typedef struct ContainerFieldInfo
{
	int access_size;
	int access_type;
	int actual_type;
} ContainerFieldInfo;

typedef enum DatabaseProvider {
	DBPROV_UNKNOWN=0,
	DBPROV_MSSQL,
	DBPROV_POSTGRESQL,
	DBPROV_COUNT
} DatabaseProvider;

#define DBPROV_XDEFAULT() xdefault: FatalErrorf(__FUNCTION__ " not implemented for database provider %d", gDatabaseProvider)

extern DatabaseProvider gDatabaseProvider;
extern int gDatabaseVersion;

extern ContainerFieldInfo g_containerfieldinfo[]; // actually in container_sql.h

// Generated by mkproto
char *findFieldText(char *data,char *field,char *buf);
char *getContainerFieldType(enum ContainerFieldType field_type);
int dataType(char *str, int *column_size, int *num_bytes, char **type_name);
void containerInitIndex(IndexedContainer *cont_lines,const char *data,int create);
void containerFreeIndex(IndexedContainer *cont);
int isNumber(unsigned char *s);
int valueNotNull(char *s);
int ctnrLineGet(CtnrLineState *state);
void ctnrLineInit(CtnrLineState *state,char *data,char *table_name);
void cntrLineFree(CtnrLineState *state);
void setFieldRequiresCR(int yes);
void checkEntCorrupted(char *data);

#ifdef DBSERVER
#define FLUSH_BINDS 1500 // Needs to be below the SQL Native Client 10 limit of 2100
void odbcInitialSetup(void);
void queryDatabaseVersion(void);
void bindInputParameter(HSTMT stmt, int index, enum ContainerFieldType type, const void * data, size_t * size);
void bindOutputColumn(HSTMT stmt, int index, enum ContainerFieldType type, size_t size, void * data, size_t * rows);
#endif

C_DECLARATIONS_END

// End mkproto
#endif
