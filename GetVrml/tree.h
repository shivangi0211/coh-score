#ifndef _TREE_H
#define _TREE_H

#include "GenericMesh.h"
#include "anim.h"
#include "animtrackanimate.h"

typedef struct
{
	int			numbones;
	int			bone_ID[MAX_OBJBONES];

} BoneData;

typedef struct _Node
{
	Mat4		mat;
	char		name[200];
	Vec3		translate;
	Vec3		pivot;
	Vec4		rotate;
	Vec3		scale;
	Vec4		scaleOrient;
	Vec3		center;
	struct _Node	*next,*child;
	AnimKeys	poskeys;
	AnimKeys	rotkeys;
	
	GMesh		mesh;
	BoneData	bones;

	F32			radius;
	Vec3		min, max;
	F32			lightmap_size;

	struct _Node *parent;	// these are accessed rarely, try to keep them
	struct _Node *prev;		// in a separate cache line
	struct _Node *nodeptr;	// for list alloc / dealloc not tree
	int			anim_id; //mm

	int			altMatCount;
	Mat4		altMat[MAX_ALTPIVOTS];
	int			altMatUsed[MAX_ALTPIVOTS];

	GMeshReductions	*reductions;
	F32			lod_distances[3];

} Node;


// Generated by mkproto
#if 0
#else
void checkit(Node *node);
#endif
void check2(Node *node);
void checknode(Node *node);
void checktree();
void treeDelete(Node *node);
void treeDeleteOnlyChildren(Node *node);
Node *newNode();
void freeNode(Node *node);
Node *treeInsert(Node *parent);
Node *treeInsertAfter(Node *parent);
void treeArrayNode(Node *node);
Node **treeArray(Node *parent,int *count);
void freeKeys(AnimKeys *keys);
void treeInit();
void treeFree();
Node *treeFindRecurse(char *name,Node *node);
Node *treeFind(char *name);
Node * getTreeRoot();
Node **treeArrayOfAnimNodes(Node *parent,int *count);
// End mkproto
#endif
