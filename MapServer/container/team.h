#ifndef _TEAM_H
#define _TEAM_H

#include "comm_backend.h"
#include "teamCommon.h"

typedef struct Entity Entity;
typedef struct TeamMembers TeamMembers;
typedef struct Supergroup Supergroup;


/*
	Team docs:

	Useful ContainerTypes: CONTAINER_TEAMUP, CONTAINER_SUPERGROUP

	teamHandle* functions are callbacks from dbserver messages

	Whenever changing any of the shared team data, always do it like this:
		teamLock
		modify data
		teamUpdateUnlock
*/

typedef enum minorityQuitFlag
{
	MINORITYQUIT_NONE		= 0,
	MINORITYQUIT_FACTION	= 1,
	MINORITYQUIT_UNIVERSE	= 2,
};

// Generated by mkproto
int teamGetIdFromEnt(Entity *e,ContainerType team_type);
TeamMembers *teamMembers(Entity *e,ContainerType team_type);
int teamAddMember(Entity* e, ContainerType type, int team_id, int invited_by);
int teamDelMember(Entity* e, ContainerType type, int kicked, int kicked_by);
int teamLock(Entity *e, ContainerType team_type);
int teamUpdateUnlock(Entity *e,ContainerType team_type);
int teamCreate(Entity *e, ContainerType type);
int teamDestroy(ContainerType type, int team_id, char* reason);
int teamGetLatest(Entity *e,ContainerType type);
int teamStartMission(Entity *e,char *mapname,char* missioninfo);
void teamHandleRemoveMembership(Entity *e,ContainerType type,int containerDeleted);
void teamInfoDestroy(Entity* e);
void teamKickRelay(Entity* e, ContainerType team_type, int kicked_by);
int team_MinorityQuit(Entity * e, bool mixedFactions, bool mixedPraetorians);
int league_MinorityQuit(Entity * e, bool mixedFactions, bool mixedPraetorians);
bool areMembersAlignmentMixed(TeamMembers *members);
bool areMembersUniverseMixed(TeamMembers *members);
bool areAllMembersOnThisMap(TeamMembers *members);
bool isTeamMissionCrossAlliance(Teamup *team);

// map instancing
int teamStartMap(Entity *e,const char *mapname,const char* missioninfo);
void teamDetachMap(Entity *e); // locks teamup
void teamDetachMapUnlocked(Entity* e);
void teamHandleMapStoppedRunning(Entity* e);
void teamUpdatePlayerCount(Entity* e);


//----------------------------------------------------------------------------------

// cw stuff
int team_AcceptOffer(Entity *leader, int new_dbid, int addEvenIfNotLeader);
void team_AcceptRelay(Entity* e, int team_id, int invited_by, int taskforce_id);
void team_KickMember( Entity *leader, int kickedID, char *player_name );
void team_KickRelay(Entity* e, int kicked_by);
void team_MemberQuit( Entity *quitter );
void team_Lfg( Entity *e );
void team_Lfg_Set( Entity *e, int mode );
void team_sendList( Packet * pak, Entity * e, int full_update );
int team_IsLeader( Entity* teammate, int db_id  );
void teamUpdateMaplist( Entity * e, char *map_num, int member_id );
void teamSendMapUpdate( Entity * e );
void team_changeLeader( Entity *e, char * name );
void team_changeLeaderRelay( int oldTeamLeader_dbid, char * newLeaderName);
void sendMemberCommon( Packet * pak, TeamMembers *members, int i, int full_update );
int team_LastCombatActivity( Entity *e );

//----------------------------------------------------------------------------------

char *alliance_CheckInviterConditions(Entity *inviter, char *invitee_name);
char *alliance_CheckInviteeConditions(Entity *invitee, int inviter_dbid, int inviter_sg_dbid, int inviter_playertype);
char *alliance_CheckAccepterConditions(Entity *accepter, int acceptee_dbid, char *acceptee_name);
char *alliance_CheckAccepteeConditions(Entity *acceptee, int accepter_dbid, int accepter_sg_dbid, int accepter_playertype);
char *alliance_CheckCancelerConditions(Entity *canceler, int cancelee_sg_dbid);

void alliance_FormAlliance(int ally1_sgid, int ally2_sgid);
void alliance_CancelAlliance(int ally1_sgid, int ally2_sgid);
void alliance_CancelDefunctAlliance(int ally1_sgid, int idx);
void alliance_CancelAllAlliances(int ally1_sgid);

char *alliance_SetMinTalkRank(Entity *e, int mintalkrank);
char *alliance_SetAllyMinTalkRank(Entity *e, int ally_dbid, int mintalkrank);
char *alliance_SetAllyNoSend(Entity *e, int ally_dbid, int nosend);

//----------------------------------------------------------------------------------
char *raid_CheckInviterConditions(Entity *inviter, char *invitee_name);
char *raid_CheckInviteeConditions(Entity *invitee, int inviter_dbid, int inviter_sg_dbid);

//----------------------------------------------------------------------------------
// in-memory debug log for teamup actions
typedef struct MemLog MemLog;
extern MemLog g_teamlog;
const char* teamTypeName(ContainerType type);
void teamlogPrintf(const char* func, const char* s, ...);
void teamlogEcho(const char* s, ...);
void quitLeagueAndTeam(Entity *e, int voluntaryLeave);

#endif
