#ifndef _ENUMFILEMANAGER_H_
#define _ENUMFILEMANAGER_H_

//this file contains a class to load in the autogenerated file which tracks all the Magic Enums,
//process the data, add and remove enums, and write out that file

#include "stdio.h"
#include "tokenizer.h"
#include "windows.h"
#include "SourceParserBaseClass.h"

#define ENUM_MAX_NAME_LENGTH 128
#define MAX_ENUMS 256

#define MAX_INIT_VALUE_PAIRS 64

#define MAX_EXTRA_NAMES_PER_ENUM_ENTRY 8

class IdentifierDictionary;

class EnumFileManager : public SourceParserBaseClass
{
public:
	EnumFileManager();
	virtual ~EnumFileManager();

public:
	virtual bool LoadStoredData(bool bForceReset);
	virtual void SetProjectPathAndName(char *pProjectPath, char *pProjectName);

	virtual void ResetSourceFile(char *pSourceFileName);

	virtual void WriteOutData(IdentifierDictionary *pDictionary);

	virtual char *GetMagicWord() { return "AUTO_ENUM"; }

	virtual void FoundMagicWord(char *pSourceFileName, Tokenizer *pTokenizer, IdentifierDictionary *pDictionary);



private:
	

	typedef struct
	{
		char codeName[ENUM_MAX_NAME_LENGTH];
		int iNumOtherNames;
		char otherNames[MAX_EXTRA_NAMES_PER_ENUM_ENTRY][ENUM_MAX_NAME_LENGTH];
	} ENUM_ENTRY_STRUCT;

	
	typedef struct
	{
		char enumName[ENUM_MAX_NAME_LENGTH];
		char sourceFileName[MAX_PATH];

		int iNumEntries;
		ENUM_ENTRY_STRUCT *pEntries;

		char prefix[ENUM_MAX_NAME_LENGTH];

		//we save the file name and line number of this enum for error reporting
		char fileName[MAX_PATH];
		int iLineNum;

	} SINGLE_ENUM_STRUCT;

	int m_iNumEnums;
	SINGLE_ENUM_STRUCT m_Enums[MAX_ENUMS];

	char m_EnumFileName[MAX_PATH];
	char m_ShortEnumFileName[MAX_PATH];

	//used while adding entries
	int m_iNumEntriesAdded;

	bool m_bSomethingChanged;

	bool m_bCurrentlyAddingAnEnum;

private:
	void CreateNewEnum(char *pSourceFileName, char *pEnumName, int iNumEntries, Tokenizer *pTokenizer);
	void RemoveCommonPrefix(SINGLE_ENUM_STRUCT *pEnum);
	void GetOldNames(Tokenizer *pTokenizer, char *pMainString);
	void EnumAssert(SINGLE_ENUM_STRUCT *pEnum, bool bCondition, char *pErrorMessage);

	
private:
	void DeleteSingleEnum(SINGLE_ENUM_STRUCT *pEnum);

};


		
#endif