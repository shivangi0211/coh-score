#ifndef RELAY_TYPES_H
#define RELAY_TYPES_H

#include "net_structdefs.h"
#include "textparser.h"


#define CMDRELAY_PROTOCOL_VERSION 20130227

// status of a relay client
typedef enum CmdRelayCmdStatus
{
	CMDRELAY_CMDSTATUS_READY,
	CMDRELAY_CMDSTATUS_BUSY,
	CMDRELAY_CMDSTATUS_ERROR,
	CMDRELAY_CMDSTATUS_APPLYING_PATCH,
	CMDRELAY_CMDSTATUS_CUSTOM_CMD,
}CmdRelayCmdStatus;


// type of client, used to determine which should start launchers / dbservers, etc
#define RELAY_TYPE_MAPSERVER	(1 << 0)
#define RELAY_TYPE_DBSERVER		(1 << 1)
#define RELAY_TYPE_CUSTOM		(1 << 2)	// runs custom scripts
#define RELAY_TYPE_AUTHSERVER   (1 << 3)
#define RELAY_TYPE_ACCOUNTSERVER (1 << 4)
#define RELAY_TYPE_CHATSERVER  (1 << 5)
#define RELAY_TYPE_AUCTIONSERVER  (1 << 6)
#define RELAY_TYPE_MISSIONSERVER  (1 << 7)
#define RELAY_TYPE_ALL			(RELAY_TYPE_MAPSERVER | RELAY_TYPE_DBSERVER | RELAY_TYPE_CUSTOM | RELAY_TYPE_AUTHSERVER | RELAY_TYPE_ACCOUNTSERVER | RELAY_TYPE_CHATSERVER | RELAY_TYPE_AUCTIONSERVER | RELAY_TYPE_MISSIONSERVER)

typedef struct {
	int type;
	const char* name;
} CmdRelayType;

static CmdRelayType cmdRelayTypes[] = {
	{ 0,						"None" },
	{ RELAY_TYPE_MAPSERVER,		"Map" },
	{ RELAY_TYPE_DBSERVER,		"Db" },
	{ RELAY_TYPE_CUSTOM,		"Custom" },
	{ RELAY_TYPE_AUTHSERVER,	"Auth" },
	{ RELAY_TYPE_ACCOUNTSERVER,	"Account" },
	{ RELAY_TYPE_CHATSERVER,	"Chat" },
	{ RELAY_TYPE_AUCTIONSERVER,	"Auction" },
	{ RELAY_TYPE_MISSIONSERVER,	"Mission" },
	{ 0, 0 }
};

// messages sent from server to each cmd relay client
enum
{
	CMDRELAY_REQUEST_UPDATE_SELF = COMM_MAX_CMD,	// make sure these initial 2 are always first, to
	CMDRELAY_REQUEST_PROTOCOL,						// insure that all clients know about these commands!
	CMDRELAY_REQUEST_STATUS,
	CMDRELAY_REQUEST_KILL_ALL_BEACONIZER,
	CMDRELAY_REQUEST_KILL_ALL_MAPSERVER,
	CMDRELAY_REQUEST_KILL_ALL_LAUNCHER,
	CMDRELAY_REQUEST_START_DBSERVER,
	CMDRELAY_REQUEST_START_LAUNCHER,
	CMDRELAY_REQUEST_CUSTOM_CMD,
	CMDRELAY_REQUEST_CANCEL_ALL,
	CMDRELAY_REQUEST_RUN_BATCH_FILE,
	CMDRELAY_REQUEST_START_ALL,
	CMDRELAY_REQUEST_STOP_ALL,
	CMDRELAY_REQUEST_START_AUTHSERVER,
	CMDRELAY_REQUEST_STOP_AUTHSERVER,
	CMDRELAY_REQUEST_START_ACCOUNTSERVER,
	CMDRELAY_REQUEST_STOP_ACCOUNTSERVER,
	CMDRELAY_REQUEST_START_CHATSERVER,
	CMDRELAY_REQUEST_STOP_CHATSERVER,
	CMDRELAY_REQUEST_START_AUCTIONSERVER,
	CMDRELAY_REQUEST_STOP_AUCTIONSERVER,
	CMDRELAY_REQUEST_START_MISSIONSERVER,
	CMDRELAY_REQUEST_STOP_MISSIONSERVER,
};

// messages sent from command relay to svr mon
enum
{
	CMDRELAY_ANSWER_STATUS = COMM_MAX_CMD,
	CMDRELAY_ANSWER_PROTOCOL,
	CMDRELAY_ANSWER_ACTION_SUCCESS,
	CMDRELAY_ANSWER_ACTION_FAILURE,
};


#endif RELAY_TYPES_H
