#pragma once


//this file contains a class to load in the autogenerated file which tracks all the Magic commands,
//process the data, add and remove enums, and write out that file

#include "stdio.h"
#include "tokenizer.h"
#include "windows.h"
#include "SourceParserBaseClass.h"

#define LATELINK_NAME_LENGTH 128
#define MAX_LATELINK_ARGS 12
#define MAX_LATELINKS 128

#define FULL_TYPE_STRING_LENGTH 1024

//used as magic words and types
typedef enum
{
	LATELINK_FUNCBODY,
	LATELINK_OVERRIDE,
	LATELINK_DECLARATION,
	LATELINK_EXTRA_PROTOTYPE, //like DECLARATION, but doesn't count towards the "required" one. 
} enumLateLinkType;


class LateLinkManager : public SourceParserBaseClass
{
public:
	LateLinkManager();
	~LateLinkManager();

public:
	virtual void SetProjectPathAndName(char *pProjectPath, char *pProjectName);
	virtual bool LoadStoredData(bool bForceReset);

	virtual void ResetSourceFile(char *pSourceFileName);

	virtual bool WriteOutData(void);

	virtual char *GetMagicWord(int iWhichMagicWord);

	//note that iWhichMagicWord can be MAGICWORD_BEGINING_OF_FILE or MAGICWORD_END_OF_FILE
	virtual void FoundMagicWord(char *pSourceFileName, Tokenizer *pTokenizer, int iWhichMagicWord, char *pMagicWordString);

	//returns number of dependencies found
	virtual int ProcessDataSingleFile(char *pSourceFileName, char *pDependencies[MAX_DEPENDENCIES_SINGLE_FILE]);

	virtual bool DoesFileNeedUpdating(char *pFileName);

	virtual char *GetAutoGenCFileName(void) { return m_LateLinkFileName; }

private:
	


	typedef struct
	{
		enumLateLinkType eLateLinkType;

		char funcName[LATELINK_NAME_LENGTH];

		char retType[LATELINK_NAME_LENGTH];

		char argTypes[MAX_LATELINK_ARGS][LATELINK_NAME_LENGTH];

		char sourceFileName[MAX_PATH];
		int iSourceLineNum;
		int iIndexInFile;

		//contains the original characters from the source file defining the return type and all arg types
		char fullTypeString[FULL_TYPE_STRING_LENGTH];

	} LATE_LINK_STRUCT;

	int m_iNumLateLinks;
	LATE_LINK_STRUCT m_LateLinks[MAX_LATELINKS];

	char m_LateLinkFileName[MAX_PATH];

	bool m_bSomethingChanged;

	char m_ProjectName[MAX_PATH];


private:
	void WriteInternalLateLinkArgList(FILE *pOutFile, LATE_LINK_STRUCT *pLateLink);
	void GetFixedUpType(Tokenizer *pTokenizer, char *pDestString, char *pFullTypeString);
	void VerifyPreWriteOut(void);
	static int LateLinkComparator(const void *p1, const void *p2);


};

