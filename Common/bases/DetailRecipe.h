/***************************************************************************
 *     Copyright (c) 2005-2006, Cryptic Studios
 *     All Rights Reserved
 *     Confidential Property of Cryptic Studios
 ***************************************************************************/
#ifndef DETAILRECIPE_H__
#define DETAILRECIPE_H__

#include "stdtypes.h"
#include "TokenizerUiWidget.h"

typedef struct Entity Entity;
typedef struct SalvageItem SalvageItem;
typedef struct Detail Detail;
typedef struct RoomDetail RoomDetail;
typedef struct Character Character;
typedef struct SalvageInventoryItem SalvageInventoryItem;
typedef struct AttribFileDict AttribFileDict;
typedef struct StashTableImp *StashTable;
typedef const struct StashTableImp *cStashTable;
typedef struct BasePower BasePower;


typedef enum RecipeRarityEnum
{
	kRecipeRarity_Ubiquitous,	// not used but here to keep in sync with salvage rarities
	kRecipeRarity_Common,
	kRecipeRarity_Uncommon,
	kRecipeRarity_Rare,
	kRecipeRarity_VeryRare,

	kRecipeRarity_Count
} RecipeRarityEnum;

typedef enum RecipeTypeEnum
{
	kRecipeType_Workshop,
	kRecipeType_Drop,
	kRecipeType_Memorized,

	kRecipeType_Count
} RecipeTypeEnum;

typedef struct SalvageRequired
{
	const SalvageItem *pSalvage;
	U32 amount;
} SalvageRequired;

typedef struct PowerRequired
{
	const BasePower *pPower;
	U32 amount; // THIS IS IGNORED
} PowerRequired;

// FLAG Definitions
typedef enum DetailRecipeFlags
{
	RECIPE_NO_GENERIC_BADGE_CREDIT	=	(1 << 0),	// This detail recipe does not give credit towards the generic recipe creation badges.
	RECIPE_NO_LEVEL_DISPLAYED		=	(1 << 1),	// This detail recipe does not display a level when shown in the UI
	RECIPE_NO_TRADE					=	(1 << 2),	// This detail recipe cannot be traded, nor can what it creates
	RECIPE_CERTIFICATON				=   (1 << 3),	// This detail awards a certification
	RECIPE_VOUCHER					=   (1 << 4),	// This detail awards a voucher
	RECIPE_NO_DISCOUNT				=   (1 << 5),	// This recipe's CreationCost will not be reduced by S_InventionDiscountCoupon.
	RECIPE_FIXED_LEVEL				=   (1 << 6),	// This detail recipe awards a fixed level recipe or enhancement,
													//   though it appears to have a level range in split pane UIs
	RECIPE_FORCE_CLAIM_DELAY		=	(1 << 7),	// Claiming this recipe via the account / character items
													//   will force the UI to wait 5 seconds with no shortcut.
}DetailRecipeFlags;


typedef struct DetailRecipe
{
	/******************** DEFINITION ************************/

	int id;
		// unique id, todo: remove

	const char *pchName;
		// Well-known name

	const char *pchSourceFile;
		// What data file this comes from, autogenerated at parse time

	const Detail **ppWorkshops;
		// The list of workshops where this recipe can be used.

	int Type;
		// RecipeTypeEnum

	int NumUses;
		// number of times this recipe can be used - Unused currently

	int maxInvAmount;
		// number of copies a player can have in his inventory

	int Rarity;
		// how often does this type of recipe show up?

	int level;
		// Level of this recipe

	int levelMin;
		// min level of this recipe - used to specify bands of rewards (enhancements & recipes only)

	int levelMax;
		// max level of this recipe - used to specify bands of rewards (enhancements & recipes only)

	int SellToVendor, BuyFromVendor;
		// Vendor prices

	TokenizerUiWidget ui;
		// standard ui components

	const char *pchDisplayTabName;
		// The tabname to put this recipe under

	const Detail *pDetailIcon;
		// the detail to display in the UI for this recipe

	/******************** COMPONENTS ************************/

	const char **CreationCost;
		// cost in inf to use this recipe

	const SalvageRequired **ppSalvagesRequired;
		// the salvage required to build this

	const PowerRequired **ppPowersRequired;
		// the powers required to build this.  Currently used in upgrading Incarnate abilities.

	/******************* REQUIREMENTS ***********************/

	int creates_enhancement;
		// the number of enhancements created by this recipe

	int creates_inspiration;
		// the number of inspirations created by this recipe
	
	int creates_salvage;
		// the number of salvage created by this recipe
	
	int creates_recipe;
		// the number of recipes created by this recipe

	const char **ppchVisibleRequires;
		// An expression which describes the conditions under which the
		//   sgroup earns the recipe. Once the sgroup earns a recipe, it is
		//   always known and visible.
	
	const char **ppchCreateRequires;
		// An expression which describes the conditions under which the
		//   recipe can be created

	const char **ppchReceiveRequires;
		// An expression which describes the conditions under which the
		//   recipe can be received from a voucher/certification

	const char **ppchNeverReceiveRequires;
		// An expression which describes the conditions under which the
		//   recipe can be never be claimed as a voucher/certification.
		//	 THIS IS FOR DISPLAY ONLY.  This requires is NOT checked for actually awarding
		//	 this recipe.

	const char **ppchAuctionRequires;
		// The requirements expression to determine if this recipe can be listed in the AuctionHouse. 
		// If empty, there are no requirements needed to be listed in the AuctionHouse.

	const char *pchDisplayCreateRequiresFail;
		// String that is displayed to the player if the ppchCreateRequires condition fails.

	const char *pchDisplayReceiveRequiresFail;
		// String that is displayed to the player if the ppchReceiveRequires condition fails.

	const char *pchDisplayFloater;
		// Floater that is displayed to the player when recipe is crafted or claimed as an account item in addition to any standard reward output.

	const char *pchDisplayReceive;
		// String that is displayed to the player when recipe is crafted or claimed as an account item in addition to any standard reward output.
		// Used for things that have no standard reward output (like reward tokens).

	const char *pchDisplayAccountItemPurchase;
		// String that is displayed to the player when recipe is purchased as an account item (cert or voucher).

	const char *pchDisplayClaimConfirmation;
		// Confirmation dialog that is displayed when the player claims the recipe as an account or character item
		// before the claim is sent to the map.

	const char *pchDisplayBuyString;
		// Replaces the default "Buy" button with a different text; used for "Revoke" recipes.

	int flags;

	/********************* REWARDS **************************/ 


	const Detail *pDetailReward;
		// the detail awarded to the player for completing this recipe, if applicable.

	const char **pchInventReward;
		// the reward table awarded to the player for completing this recipe, if applicable.

	// why isn't this a union?
	const char *pchEnhancementReward;
		// the enhancement awarded to the player for completing this recipe, if applicable.

	const char *pchRecipeReward;
		// the recipe awarded to the player for completing this recipe, if applicable.

	const char *pchPowerReward;
		// the power awarded to the player for completing this recipe, if applicable.

	const char *pchIncarnateReward;
		// the Incarnate ability awarded to the player for completing this recipe, if applicable.

	const char *pchContactReward;
		// the Contact awarded to the player for completing this recipe, if applicable.

	int InfluenceReward;
		// amount of influence awarded to the player for completing this recipe, if applicable.

} DetailRecipe;


typedef struct DetailRecipeDict
{
	const DetailRecipe **ppRecipes;
	cStashTable haItemNames;
	const DetailRecipe **itemsById;

	cStashTable itemsFromTabName; // DetailRecipe **
	cStashTable itemsFromEnhancementName;

	cStashTable haCategoryNames;
	cStashTable haCategoryMinLevel;
	cStashTable haCategoryMaxLevel;

#if CLIENT
	cStashTable stBySalvageComponent; //  DetailRecipe **
#endif
} DetailRecipeDict;


// ------------------------------------------------------------
// defines

#define INVENTION_COUPON_DISCOUNT 0.75f
#define INVENTION_COUPON_SALVAGE "S_InventionDiscountCoupon"

// ------------------------------------------------------------
// globals

extern SHARED_MEMORY DetailRecipeDict g_DetailRecipeDict;

// ------------------------------------------------------------
// functions

const DetailRecipe* detailrecipedict_RecipeFromName(char const *name);
const DetailRecipe* detailrecipedict_RecipeFromId(int id);
const DetailRecipe* detailrecipedict_RecipeFromCatagoryLevel(const char *name, int level);
int detailrecipedict_CatagoryExists(const char *catName);
int detailrecipedict_CatagoryMax(const char *catName);
int detailrecipedict_CatagoryMin(const char *catName);


void detailrecipes_Load(void);

const DetailRecipe **entity_GetValidDetailRecipes(Entity *e, RoomDetail *pSrc, char *pWorkshopType);
bool character_DetailRecipeCreatable(Character *c, const DetailRecipe *dr, SalvageInventoryItem ***hInventory, bool bCheckRecipeInventory, bool bUseCoupon, int onlyConsumeOrOnlyGrant);
const DetailRecipe *detailrecipe_FromId(const DetailRecipe **recipes, int id);
const DetailRecipe* detailrecipedict_RecipeFromEnhancementAndLevel(const char *enhName, const int level);
bool detailrecipedict_IsBoostTradeable(const BasePower* power, int level, const char *authFrom, const char *authTo);

int entity_IsAtWorkShop(Entity *e, RoomDetail *pSrc);

#if SERVER
typedef struct SalvageInventoryItem SalvageInventoryItem;
int character_DetailRecipeCreate(Character *pchar, const DetailRecipe *dr, int iLevel, int bUseCoupon);
int character_DetailRecipeGrantResults(Character *pchar, const DetailRecipe *dr, int iLevel, int bUseCoupon, int * bArchitect, int verified);
int character_DetailRecipeConsumeRequirements(Character *pchar, const DetailRecipe *dr, int iLevel, int bUseCoupon, SalvageInventoryItem ***hInventory, int cost);
int character_DetailRecipeRefundRequirements(Character *pchar, const DetailRecipe *dr, int iLevel);
#endif


#endif /* #ifndef DETAILRECIPE_H__ */

/* End of File */

