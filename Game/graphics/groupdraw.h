#ifndef _GROUPDRAW_H
#define _GROUPDRAW_H

#include "group.h"
#include "mathutil.h"
#include "texEnums.h"
#include "frustum_c.h"

typedef struct FxMiniTracker FxMiniTracker;
typedef struct BasicTexture BasicTexture;
typedef struct TexBind TexBind;
typedef struct EntLight EntLight;
typedef struct DefTexSwapNode DefTexSwapNode;
typedef struct Model Model;
typedef struct MiniTracker MiniTracker;

enum 
{
	PARENT_FADE			= ( 1 << 0 ),
	VIS_DOORFRAME		= ( 1 << 1 ),
	CHILD_PARENT_FADE	= ( 1 << 2 ),
	CACHEING_IS_DONE	= ( 1 << 3 ),
	HAS_FOG				= ( 1 << 4 ),
	HAS_SHADOW			= ( 1 << 5 ),
	ONLY_EDITORVISIBLE	= ( 1 << 6 ),
	HAS_SOUND_RADIUS	= ( 1 << 7 ),
};

typedef enum VisType
{
	VIS_NORMAL = 0,			// non-tray children of a tray, or outside geometry
	VIS_EYE,				// tray containing the camera
	VIS_CONNECTOR,			// tray reached through portals
	VIS_DRAWALL,
	//VIS_ONEMORE,			//unused
} VisType;

typedef struct DrawParams
{
	F32			view_scale;
	DefTracker *light_trkr;
	U8			*tint_color_ptr;
	Vec3		node_mid;
	TrickNode	*tricks;
	U32			lod_fadenode:2;
	U32			no_fog_clip:1;
	U32			do_welding:1;
	U32			no_planar_reflections:1;
	U32			tray_child:1;				// objects are rendering as part of a tray
	F32			alpha;
	F32			node_radius;
	int			view_cache_parent_index;
} DrawParams;


typedef struct GroupDraw
{
	F32				fog_far_dist;
	int				fog_clip;
	F32				minspec_fog_far_dist;
	U32				do_welding : 1;
	U32				zocclusion : 1;
	U32				nosway : 1;
	U32				see_outside : 1;	//If you are outside, or in a portal is tagged as able to see outside
	U32				see_everything : 1; //in editor
	U32				search_visible : 1;
	U32				draw_id;
	EntLight		*globFxLight; //Mild Hack for the fx world drawing code.
	FxMiniTracker	*globFxMiniTracker; //ditto
	F32				sway_table[256];
	F32				sway_random_offs[64];
	F32				sway_random_offs_clamped[64];
	F32				sway_random_offs_delta[64];
	F32				sway_count;

	Mat4			inv_cam_mat;

	void			(*search_visible_callback)(DefTracker *tracker, Model *model, MiniTracker *minitracker);

	// for shadowmap culling
	GfxFrustum	shadowmap_cull_frustum;		// frustum used to cull models that do not cast shadows into the view frustum
	F32					znear;			// used to restrict frustum z planes when doing culling against shadowmap cascade slices
	F32					zfar;

	int				calls[30],calls_idx; //perf debug
} GroupDraw;

extern GroupDraw group_draw;

// Generated by mkproto
void groupDrawDefTracker(GroupDef *def,DefTracker *tracker,Mat4 matx, EntLight * light, FxMiniTracker * fxminitracker, F32 viewScale, DefTracker *lighttracker, int uid);
void groupDrawRefs(Mat4 cam_mat, Mat4 inv_cam_mat);
int groupDynDraw(int world_id,Mat4 view_xform);

void makeAGroupEnt( GroupEnt * groupEnt, GroupDef * def, const Mat4 mat, F32 view_scale, int has_dynamic_parent );
#define calculateVisDist(groupEnt) (game_state.lod_scale * (groupEnt)->vis_dist_scaled_cache + (groupEnt)->vis_def_radius_cache)

void groupDrawCacheInvalidate();
void checkForGroupEntValidity();

bool trackerIsHiddenFromBurningBuilding(DefTracker *tracker, bool *pParentIsBreakable);

// End mkproto

#endif
