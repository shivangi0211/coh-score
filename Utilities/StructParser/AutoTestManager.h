#pragma once

//this file contains a class to load in the autogenerated file which tracks all the Magic commands,
//process the data, add and remove enums, and write out that file

#include "stdio.h"
#include "tokenizer.h"
#include "windows.h"
#include "SourceParserBaseClass.h"

#define MAX_AUTOTEST_COMMAND_LENGTH 256
#define MAX_AUTOTESTS 512


class AutoTestManager : public SourceParserBaseClass
{
public:
	AutoTestManager();
	~AutoTestManager();

public:
	virtual void SetProjectPathAndName(char *pProjectPath, char *pProjectName);
	virtual bool LoadStoredData(bool bForceReset);

	virtual void ResetSourceFile(char *pSourceFileName);

	virtual bool WriteOutData(void);

	virtual char *GetMagicWord(int iWhichMagicWord);

	//note that iWhichMagicWord can be MAGICWORD_BEGINING_OF_FILE or MAGICWORD_END_OF_FILE
	virtual void FoundMagicWord(char *pSourceFileName, Tokenizer *pTokenizer, int iWhichMagicWord, char *pMagicWordString);

	//returns number of dependencies found
	virtual int ProcessDataSingleFile(char *pSourceFileName, char *pDependencies[MAX_DEPENDENCIES_SINGLE_FILE]);

	virtual bool DoesFileNeedUpdating(char *pFileName);

	virtual char *GetAutoGenCFileName(void) { return m_AutoTestFileName; }

private:
	


typedef struct
{
	char groupName[MAX_AUTOTEST_COMMAND_LENGTH];
	char parentName[MAX_AUTOTEST_COMMAND_LENGTH];
	//the name of the function in source code
	char functionName[MAX_AUTOTEST_COMMAND_LENGTH];
	char setupName[MAX_AUTOTEST_COMMAND_LENGTH];
	char teardownName[MAX_AUTOTEST_COMMAND_LENGTH];

	char sourceFileName[MAX_PATH];
	int iSourceLineNum;

	char *pAutoAssertString;
} AUTO_TEST_STRUCT;


	int m_iNumAutoTests;
	AUTO_TEST_STRUCT m_AutoTests[MAX_AUTOTESTS];

	char m_AutoTestFileName[MAX_PATH];

	bool m_bSomethingChanged;

	char m_ProjectName[MAX_PATH];

	//the most recent "AUTO_TEST_GROUP" in the current file, so that blocks can automatically associate with the previous group
	AUTO_TEST_STRUCT *m_pMostRecentGroup;


private:
	void RecurseOutputTestRegister(FILE *pOutFile, AUTO_TEST_STRUCT *pTest, int iRecurseDepth);

	void FoundMagicWordAutoTestChild(char *pSourceFileName, Tokenizer *pTokenizer);
	void FoundMagicWordAutoTestGroup(char *pSourceFileName, Tokenizer *pTokenizer);
	void FoundMagicWordAutoTest(char *pSourceFileName, Tokenizer *pTokenizer);
	void FoundMagicWordAutoTestBlock(char *pSourceFileName, Tokenizer *pTokenizer);
	void DoPreWriteOutFixup(void);
	void PrependParentGroupNames(AUTO_TEST_STRUCT *pAutoTest);
	void GetAtestFileName(char outName[MAX_PATH], char *pInName);

	AUTO_TEST_STRUCT *FindTestByName(char *pName);

	void CreateAtestFile(char *pFileName);

	static int AutoTestComparator(const void *p1, const void *p2);

};


		
