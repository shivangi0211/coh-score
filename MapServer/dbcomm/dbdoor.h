#ifndef _DOOR2_h
#define _DOOR2_h

#include "grouputil.h"

typedef struct GroupDefTraverser GroupDefTraverser;
typedef struct Entity Entity;
typedef struct Packet Packet;

#define INVALID_DOOR_ENTRY_LEVEL -1

typedef enum
{
	DOORTYPE_MISSIONLOCATION,
	DOORTYPE_SPAWNLOCATION,
	DOORTYPE_GOTOSPAWN,
	DOORTYPE_PERSISTENT_NPC,
	DOORTYPE_TASK_VISIT_LOCATION,
	DOORTYPE_FREEOPEN,
	DOORTYPE_LOCKED,
	DOORTYPE_KEY,
	DOORTYPE_SGBASE,	
	DOORTYPE_BASE_PORTER,
	DOORTYPE_FLASHBACK_CONTACT,
	DOORTYPE_EXITTOSPAWN,
	DOORTYPE_GOTOSPAWNABSPOS
} DoorType;

#define MAX_DOOR_REQUIRES 8

typedef struct DoorRequires
{
	char		*requires;
	char		*lockedText;
	int			allowThrough;
} DoorRequires;

typedef struct DoorEntry
{
	Mat4		mat;
	int			db_id;
	int			map_id;
	char		*name;
	char		*filename;
	char		*special_info;
	char		*requires;
	char		*lockedText;
	DoorRequires doorRequires[MAX_DOOR_REQUIRES];
	int			entry_min,entry_max;	// level you must be between to use this door
	char		*monorail_line;
	int			detail_id;				// The base detail this is bound to, if any
	int			radius_override;				// If we're not using the standard door radius
	// These next two are extremely likely to wind up getting deprecated
	U32			villainOnly : 1;
	U32			heroOnly	: 1;
	U32			noMissions	: 1;
	U32			noFallbackMissions	: 1;
	U32			gotoClosest : 1;
	DoorType	type;
} DoorEntry;

typedef struct ClientLink ClientLink;

// Generated by mkproto
DoorEntry *dbFindLocalDoorWithName(DoorType type, char *name);
DoorEntry *dbFindLocalMapObj(const Vec3 pos,int type,F32 max_dist);
DoorEntry *dbFindReachableLocalMapObj(Entity* e, int type, F32 max_dist);
DoorEntry *dbFindGlobalMapObj(int mapid, Vec3 pos);
void dbDoorCreateBeaconConnections(void);
void dbGatherMapLinkInfo(void);
void handleServerDoorUpdate(Packet *pak);
void sendDoorsToDbServer(int is_static);
DoorEntry *dbFindSpawnLocation(char *target_name);
DoorEntry *dbFindClosestSpawnLocation(const Vec3 pos, char *target_name);
DoorEntry *dbFindSpawnLocationForBaseRaid(char *target_name, Entity *e);
DoorEntry *dbGetLocalDoors(int *count);
DoorEntry *dbGetTrackedDoors(int *count);
char* dbGetDoorName(int door_id);
void dbDebugPrintTrackedDoors(ClientLink* client, int missiononly);
void dbDebugPrintMissionDoorTypes(ClientLink* client);
DoorEntry *dbFindDoorWithName(DoorType type, const char* name);
DoorEntry *dbFindDoorWithSpecialInfo(DoorType type, const char* name);
// End mkproto
void dbRegisterNewContact(char* name, Mat4 location);
DoorEntry *dbFindDoorWithDoorId(int db_id);
DoorEntry *dbFindAlternateMissionExit();
DoorEntry* debugGetRandomExitDoor(void); 
void updateLocalBaseDoor( int type, char * name, char * special, int detailID, Mat4 newmat );
void deleteLocalBaseDoor( int type, char * name, char * special, int detailID);

typedef struct RoomDetail RoomDetail;
void updateAllBaseDoorTypes( RoomDetail *detail, Mat4 door_pos );
void deleteAllBaseDoorTypes( RoomDetail * detail, int include_entrance);
#endif
