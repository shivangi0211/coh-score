#ifndef _GROUPGRID_H
#define _GROUPGRID_H

#include "stdtypes.h"

typedef struct DefTracker DefTracker;
typedef struct GroupDef GroupDef;
typedef struct Grid Grid;

typedef enum 
{
	FINDINSIDE_TRAYONLY = 2,
	FINDINSIDE_VOLUMETRIGGER,
	FINDINSIDE_ANYOBJ,
} FindInsideOpts;

//Information about the Volumes you are in right now

typedef struct Volume 
{
	DefTracker * volumeTracker;	//The volume you are in right now
	DefTracker * volumePropertiesTracker; //The tracker that has the properties of this volume
} Volume;

typedef struct VolumeList 
{
	Volume				* volumes;				//array of the volumes I'm in right now (dynArray)
	int					volumeCount;			//number of volumes I'm in right now
	int					volumeCountMax;			//housekeeping number for dynArray
	
	Volume				* neighborhoodVolume;		//neighborhood I'm currently in (player only) (ptr into volumesList above)
	Volume				* materialVolume;			//material Im in for fx and the Volume power (ptr into volumesList above)
	Volume				* indoorVolume;				//indoor lighting volume I'm currently in (ptr into volumesList above)

	//Last Frame
	Volume				* volumesLastFrame;			//array of the volumes I'm in right now (dynArray)
	int					volumeCountLastFrame;		//number of volumes I'm in right now
	int					volumeCountMaxLastFrame;	//housekeeping number for dynArray

	Vec3				posVolumeWasLastChecked;//position the last time I checked to see what volume I was in
	int					groupDefVersion;		//for tracking when the trackers might have changed

} VolumeList;

//End volume info

extern VolumeList sharedVolumeList;	// use this with groupFindInside to avoid allocating your own

// Generated by mkproto
void collGridAddGroup(Grid *grid,DefTracker *ref,void *tracker);
void groupGridActivate(DefTracker *parent_tracker,int group_id,Grid *grid);
DefTracker *createCollTracker(const char * anmfilename, GroupDef * worldGroupPtr, const Mat4 mat);
void groupRefGridDelEx(DefTracker *ref,Grid *grid);
void groupRefGridDel(DefTracker *ref);
void groupGridDelEx(DefTracker *ref,Grid *grid);
void groupGridDel(DefTracker *ref);
void groupUnpackGrid(Grid *grid,DefTracker *ref);
void groupRefActivate(DefTracker *ref);
DefTracker *groupFindOnLine(Vec3 start,Vec3 end,Mat4 mat,bool* hitWorld,int use_notselectable);
DefTracker *groupFindInside(const Vec3 pos,FindInsideOpts find_type, VolumeList * volumeList, int * didVolumeListChangePtr );
DefTracker *groupFindLightTracker(Vec3 pos);
int groupFindDoorVolumeWithinRadius(const Vec3 pos, int radius);
void groupGridRecreate(void); // For reloading
void overlappingVolume_Load(); // for designers to find overlapping volumes
int nextOverlapPoint(Vec3 point, int *current, int *count);
// End mkproto
#endif
