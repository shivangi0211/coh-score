#ifndef ENTVARUPDATE_H__
#define ENTVARUPDATE_H__


#include "stdtypes.h"
#include "netio.h"

typedef struct Entity Entity;

//Command list that gets interpreted in
//lf_server.c  void get Input(Packet *pak,ClientLink *client)
//
enum
{
	CLIENTINP_SVRCMD,
	CLIENTINP_VISITED_MAP_CELL,
	CLIENTINP_SENDING_CHARACTER,
	CLIENTINP_RECEIVED_CHARACTER,
	CLIENTINP_ACK_FULL_UPDATE,
	CLIENTINP_TOUCH_NPC,
	CLIENTINP_RECEIVE_TRAYS,
	CLIENTINP_ENTER_DOOR,
	CLIENTINP_ENTER_BASE_CHOICE,
	CLIENTINP_REQUEST_GURNEY_XFER,
	CLIENTINP_REQUEST_WAYPOINT,
	CLIENTINP_DOORANIM_DONE,
	CLIENTINP_WINDOW,
	CLIENTINP_DOCK_MODE,
	CLIENTINP_CHAT_DIVIDER,
	CLIENTINP_INSPTRAY_MODE,
	CLIENTINP_TRAY_MODE,
	CLIENTINP_KEYBIND,
	CLIENTINP_KEYBIND_CLEAR,
	CLIENTINP_KEYBIND_RESET,
	CLIENTINP_KEYPROFILE,
	CLIENTINP_CONTACT_DIALOG_RESPONSE,
	CLIENTINP_CONTACT_CELL_CALL,
	CLIENTINP_CONTACT_FLASHBACK_LIST_REQUEST,
	CLIENTINP_CONTACT_FLASHBACK_DETAIL_REQUEST,
	CLIENTINP_CONTACT_FLASHBACK_CHECK_ELIGIBILITY_REQUEST,
	CLIENTINP_CONTACT_FLASHBACK_ACCEPT_REQUEST,
	CLIENTINP_CONTACT_TASKFORCE_ACCEPT_REQUEST,
	CLIENTINP_ACTIVATE_POWER,
	CLIENTINP_ACTIVATE_POWER_AT_LOCATION,
	CLIENTINP_ACTIVATE_INSPIRATION,
	CLIENTINP_SET_DEFAULT_POWER,
	CLIENTINP_CLEAR_DEFAULT_POWER,
	CLIENTINP_CANCEL_QUEUED_POWER,
	CLIENTINP_CANCEL_WINDUP_POWER,
	CLIENTINP_MOVE_INSPIRATION,
	CLIENTINP_DEAD_NOGURNEY_RESPONSE,
	CLIENTINP_STANCE,
	CLIENTINP_SET_CHAT_CHANNEL,
	CLIENTINP_SEND_CHAT_SETTINGS,
	CLIENTINP_SEND_SELECTED_CHAT_TABS,
	CLIENTINP_READ_PLAQUE,

	CLIENTINP_COMBINE_BOOSTS,
	CLIENTINP_BOOSTER_BOOST,
	CLIENTINP_CATALYST_BOOST,
	CLIENTINP_SET_INVENTORY_BOOST,
	CLIENTINP_SET_POWER_BOOST,
	CLIENTINP_REMOVE_INVENTORY_BOOST,
	CLIENTINP_REMOVE_POWER_BOOST,
	CLIENTINP_UNSLOT_POWER_BOOST,

	CLIENTINP_LEVEL_ASSIGN_BOOST_SLOT,
	CLIENTINP_LEVEL_BUY_POWER,
	CLIENTINP_LEVEL,

	// teamup commands
	CLIENTINP_TEAM_OFFER,
	CLIENTINP_TEAM_BUSY,
	CLIENTINP_TEAM_ACCEPT,
	CLIENTINP_TEAM_DECLINE,
	CLIENTINP_TEAM_KICK,
	CLIENTINP_LEGACYTEAMUI_NOTE,
	CLIENTINP_SUPERGROUP_TOGGLE,
	CLIENTINP_SUPERGROUP_LIST_REQUEST,

	// base raids
	CLIENTINP_RAID_CHALLENGE,
	CLIENTINP_REQ_SGRAIDLIST,
	CLIENTINP_BASERAID_PARTICIPATE,
	CLIENTINP_BASERAID_PARTICIPATE_TRANSFER,
	CLIENTINP_RAID_SCHEDULE,
	CLIENTINP_RAID_CANCEL,

	// trade
	CLIENTINP_TRADE_CANCEL,
	CLIENTINP_TRADE_UPDATE,

	CLIENTINP_REQUEST_PLAYER_INFO,
	CLIENTINP_UPDATE_COMBAT_STATS,
	CLIENTINP_SGROUP_CREATE,
	CLIENTINP_SEND_SGCOSTUME,
	CLIENTINP_SEND_SGCOSTUME_DATA,
	CLIENTINP_SGROUP_COSTUMEREQ,
	CLIENTINP_HIDE_EMBLEM_UPDATE,
	CLIENTINP_SEND_TAILOR,
	CLIENTINP_SEND_POWER_CUST,
	CLIENTINP_SEND_RESPEC,

	// visit location commands
	CLIENTINP_TASK_REACHED_VISIT_LOCATION,
	CLIENTINP_REQUEST_TASK_DETAIL,

	CLIENTINP_THIRD,
	CLIENTINP_OPTIONS,
	CLIENTINP_DIVIDERS,
	CLIENTINP_TITLES,
	CLIENTINP_PLAYERDESC,

	CLIENTINP_REQUEST_SOUVENIR_INFO,

	CLIENTINP_STORE_SELL_ITEM,
	CLIENTINP_STORE_BUY_ITEM,
	CLIENTINP_STORE_BUY_SALVAGE,
	CLIENTINP_STORE_BUY_RECIPE,

	CLIENTINP_ABANDON_MISSION,

	CLIENTINP_GIFTSEND,
	CLIENTINP_ACCEPT_POWREQ,
	CLIENTINP_ACCEPT_TEAMLEVEL,	

	CLIENTINP_REWARDCHOICE,

	CLIENTINP_RESPEC_CANCEL,

	CLIENTINP_NOTAHACKER, // Gets sent on the 37th packet

	CLIENTINP_ARENA_REQKIOSK,
	CLIENTINP_ARENA_REQ_CREATE,
	CLIENTINP_ARENA_REQ_RESULT,
	CLIENTINP_ARENA_REQ_OBSERVE,
	CLIENTINP_ARENA_REQ_JOIN,
	CLIENTINP_ARENA_REQ_JOIN_INVITE,
	CLIENTINP_ARENA_REQ_DESTROY,
	CLIENTINP_ARENA_REQ_SIDE,
	CLIENTINP_ARENA_REQ_READY,
	CLIENTINP_ARENA_REQ_SETMAP,
	CLIENTINP_ARENA_REQ_ENTERMAP,
	CLIENTINP_ARENA_CREATOR_UPDATE,
	CLIENTINP_ARENA_PLAYER_UPDATE,
	CLIENTINP_ARENA_FULL_PLAYER_UPDATE,
	CLIENTINP_ARENA_DROP,
	CLIENTINP_ARENAKIOSK_OPEN,
	CLIENTINP_ARENA_REQ_TELEPORT,

	CLIENTINP_PETCOMMAND,
	CLIENTINP_PETSAY,
	CLIENTINP_PETRENAME,
	CLIENTINP_ARENA_MANAGEPETS,
	CLIENTINP_ARENA_COMMITPETCHANGES,
	
	// invention
	CLIENTINP_CRAFTING_REVERSE_ENGINEER,

	CLIENTINP_INVENT_SELECTRECIPE,
	CLIENTINP_INVENT_SLOTCONCEPT,
	CLIENTINP_INVENT_UNSLOT,
	CLIENTINP_INVENT_HARDENSLOT,
	CLIENTINP_INVENT_FINALIZE,
	CLIENTINP_INVENT_CANCEL,

	// workshop
	CLIENTINP_WORKSHOP_CREATE,
	CLIENTINP_WORKSHOP_INTERACT,
	CLIENTINP_WORKSHOP_CLOSE,

	// portal doors - dynamic doors
	CLIENTINP_PORTAL_INTERACT,

	// bases
	CLIENTINP_BASE_EDIT,
	CLIENTINP_BASE_SETPOS,
	CLIENTINP_BASE_INTERACT,
	CLIENTINP_REQ_WORLD_UPDATE,

	// base storage
	CLIENTINP_BASESTORE_ADJ_SALVAGE_FROM_INV,
	CLIENTINP_BASESTORAGE_ADJ_INSPIRATION_FROM_INV,
	CLIENTINP_BASESTORAGE_ADJ_ENHANCEMENT_FROM_INV,

	// team completion
	CLIENTINP_TEAMCOMPLETE_RESPONSE,

	CLIENTINP_SEARCH,
	CLIENTINP_UPDATE_NAME,
	
	CLIENTINP_DELETE_TEMPPOWER,
	CLIENTINP_DELETE_SALVAGE,
	CLIENTINP_DELETE_RECIPE,
	CLIENTINP_SELL_RECIPE,
	CLIENTINP_SELL_SALVAGE,
	CLIENTINP_OPEN_SALVAGE,
	CLIENTINP_GET_SALVAGE_IMMEDIATE_USE_STATUS,
	CLIENTINP_BUY_RECIPE,

	// auction house
	CLIENTINP_AUCTION_REQ_INVUPDATE,
	CLIENTINP_AUCTION_REQ_HISTORYINFO,
	CLIENTINP_AUCTION_ADDITEM,
	CLIENTINP_AUCTION_GETITEM,
	CLIENTINP_AUCTION_CHANGEITEMSTATUS,
	CLIENTINP_AUCTION_GETINFSTORED,
	CLIENTINP_AUCTION_GETAMTSTORED,
	CLIENTINP_AUCTION_BATCH_REQ_ITEMSTATUS,
	CLIENTINP_AUCTION_LIST_REQ_ITEMSTATUS,
	CLIENTINP_AUCTION_REQ_BANNEDUPDATE,

	// stored salvage
	CLIENTINP_MOVE_SALVAGE_TO_PERSONALSTORAGE,
	CLIENTINP_MOVE_SALVAGE_FROM_PERSONALSTORAGE,

	// mission maker
	CLIENTINP_STORYARC_CREATE,
	CLIENTINP_MISSIONSERVER_COMMAND,
	CLIENTINP_MISSIONSERVER_PUBLISHARC,
	CLIENTINP_MISSIONSERVER_UNPUBLISHARC,
	CLIENTINP_MISSIONSERVER_VOTEFORARC,
	CLIENTINP_MISSIONSERVER_REPORTARC,
	CLIENTINP_MISSIONSERVER_SEARCHPAGE,
	CLIENTINP_MISSIONSERVER_ARCINFO,
	CLIENTINP_MISSIONSERVER_ARCDATA_PLAYARC,
	CLIENTINP_MISSIONSERVER_ARCDATA_VIEWARC,
	CLIENTINP_MISSIONSERVER_COMMENT,
	CLIENTINP_MISSIONSERVER_AUTHOR_BIO,
	CLIENTINP_MISSIONSERVER_SETKEYWORDSFORARC,

	CLIENTINP_ARCHITECTKIOSK_INTERACT,
	CLIENTINP_ARCHITECTKIOSK_REQUESTINVENTORY,

	// sg color data request
	CLIENTINP_REQUEST_SG_COLORS,

	// badge monitor
	CLIENTINP_UPDATE_BADGE_MONITOR_LIST,

	// build rename response
	CLIENTINP_RENAME_BUILD_RESPONSE,
	
	// get an auth key for use in contacting PlayNC
	CLIENTINP_GET_PLAYNC_AUTH_KEY,

	// costume change emote list request
	CLIENTINP_COSTUMECHANGEEMOTELIST_REQUEST,

	// Confirming SG supreme leader promote
	CLIENTINP_DO_PROMOTE,

	// Requesting whether I can change permissions
	CLIENTINP_REQUEST_SG_PERMISSIONS,

	// Zowie
	CLIENTINP_ZOWIE,

	// Turnstile
	CLIENTINP_REQUEST_EVENT_LIST,
	CLIENTINP_QUEUE_FOR_EVENTS,
	CLIENTINP_REMOVE_FROM_QUEUE,
	CLIENTINP_EVENT_READY_ACK,
	CLIENTINP_EVENT_RESPONSE,
	CLIENTINP_REQUEST_REJOIN_INSTANCE,

	CLIENTINP_INCARNATE_CREATE,

	CLIENTINP_SEND_DISPLAYALIGNMENTSTATSTOOTHERS_SETTING,

	CLIENTINP_MORAL_CHOICE_RESPONSE,

	CLIENTINP_NEW_FEATURE_OPEN,
	CLIENTINP_UPDATE_NEW_FEATURE_VERSION,

	// command count
	CLIENTINP_CMD_COUNT,
};
// put additions to this list in parseClientInput.c - getCmdTimerName()

#define	PKT_BITS_TO_REP_DB_ID						( 22 )
#define	PKT_BITS_TO_REP_SVR_IDX						( 12 )


#define MAX_PLAYER_NAME_LEN(e) 20

// NEW chat defaults
//----------------------------------------------------------------------
// ONLY ADD TO END OF THIS ENUM!!!!  
//----------------------------------------------------------------------
typedef enum INFO_BOX_MSGS
{ // the server uses bits packed to send this type of message
	INFO_CONSOLE = -1,

	// ONLY ADD TO END OF THIS LIST!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	INFO_COMBAT = 1,		// This is damage the player deals
	INFO_DAMAGE,			// This is damage the player recieves
	INFO_SVR_COM,			// This is for generic server messages
	INFO_NPC_SAYS,			// NPC text
	INFO_VILLAIN_SAYS,		// Essentially same as NPC text
	INFO_PET_COM,			// User controlled pet chat
	INFO_PRIVATE_COM,		// Private message
	// ONLY ADD TO END OF THIS LIST!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	INFO_TEAM_COM,			//
	INFO_SUPERGROUP_COM,	//
	INFO_NEARBY_COM,		//  USER CHAT CHANNELS
	INFO_SHOUT_COM,			//  Needs to stay in this block
	INFO_REQUEST_COM,		//
	INFO_FRIEND_COM,		//
	// ONLY ADD TO END OF THIS LIST!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	INFO_ADMIN_COM,			// Global Admin messages
	INFO_USER_ERROR,		// Any failure message
	INFO_DEBUG_INFO,		// Debug only commands, users should never see this
	INFO_EMOTE,				// Emotes
	INFO_AUCTION,			// Auction House messages
	INFO_COMBAT_SPAM,		// Power information
	INFO_GMTELL,			// Tell Sent by GM's get special color
	// ONLY ADD TO END OF THIS LIST!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	INFO_TAB,				// Message being sent to the current tab
	INFO_REWARD,			// Used for any rewards a user gets
	INFO_COMBAT_ERROR,		// Combat messages used to relate why a power failed
	INFO_HEAL,				// Heals recieved
	INFO_HEAL_OTHER,		// Heals given
	INFO_HELP,				// Guide/Help channel
	// ONLY ADD TO END OF THIS LIST!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	INFO_ARENA,				// Arena Channel
	INFO_ARENA_ERROR,		// Arena Errors, falls though to INFO_USER_ERROR if arena window isn't open
	INFO_ARENA_GLOBAL,		// This is a server wide arena channel
	INFO_ALLIANCE_OWN_COM,	// Alliance chat: own SG talking
	INFO_ALLIANCE_ALLY_COM,	// Alliance chat: ally talking
	// ONLY ADD TO END OF THIS LIST!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	INFO_COMBAT_HITROLLS,
	INFO_PET_SAYS,
	INFO_EVENT,
	INFO_CHANNEL,
	INFO_PAYMENT_REMAIN_TIME,

	INFO_PET_COMBAT,
	INFO_PET_DAMAGE,
	INFO_PET_COMBAT_SPAM,
	INFO_PET_HEAL,
	INFO_PET_HEAL_OTHER,
	INFO_PET_COMBAT_HITROLLS,

	INFO_EVENT_HERO,
	INFO_EVENT_VILLAIN,

	INFO_CAPTION,
	INFO_LEVELINGPACT_COM,
	INFO_ARCHITECT,
	INFO_ARCHITECT_GLOBAL,
	INFO_LEAGUE_COM,
	INFO_EVENT_PRAETORIAN,
	INFO_LOOKING_FOR_GROUP,
	INFO_PRIVATE_NOREPLY_COM,//just like the private channel, but does not allow reply/autoreply
	// ADD NEW CHANNELS HERE


	INFO_TOTAL
} INFO_BOX_MSGS;

#define SYSTEM_CHANNEL_BITFIELD_SIZE ((INFO_TOTAL+31)/32)

#define COMBAT_UPDATE_INTERVAL 0.125f

#define LFG_ANY		(1<<0)
#define LFG_HUNT	(1<<1)
#define LFG_DOOR	(1<<2)
#define LFG_TF		(1<<3)
#define LFG_TRIAL	(1<<4)
#define LFG_ARENA	(1<<5)
#define LFG_NONE	(1<<6)
#define LFG_NOGROUP (1<<7)

enum
{
	INFO_TAB_DESC,
	INFO_TAB_POWER,
	INFO_TAB_BADGE,
	INFO_TAB_ALIGNMENT,
	INFO_TAB_PVP,
	INFO_TAB_ARENA,
	INFO_TAB_MAX,
};

void serveGameLogic();
void calcDerivedStats( Entity * ent );
void sendServerCmd(	Entity *e,int cmd, int data1, int data2 );
void sendDialog( Entity	*ent, const char *s );
void sendDialogIgnore( Entity	*ent, const char *message, int type );
void sendInfoBox( Entity *ent, int type, const char *s, ... );
int currentDay();
void updateGameStateForEachEntity(float fRate);

#endif // ENTVARUPDATE_H__

/* End of File */

