#ifndef _GROUPTRACK_H
#define _GROUPTRACK_H

typedef struct DefTracker DefTracker;
typedef struct GroupDef GroupDef;
typedef struct TrickNode TrickNode;

DefTracker ** frozenTrackers;	//list of trackers that need to be updated after the edit cache is
								//done with them (because they were frozen, so they need to be moved)

// Generated by mkproto
#if CLIENT
void colorTrackerDel(DefTracker *tracker);
void lightGridDel(DefTracker *tracker);
void lightGridDeleteAllOnTracker(DefTracker * tracker);
void colorTrackerDeleteAll(void);
#endif

DefTracker* trackerUnpack(DefTracker *ref, int depth, int *idxs, char **names, int free_names);
// walks down the tracker tree from the root tracker ref
// does checking with counts and names, if they're given
// frees the strings in names if free_names

int trackerPack(DefTracker *tracker, int *idxs, char **names, int alloc_names);
// walks up the tracker tree generating indexes and checking information,
// the strings in names should be considered unsafe
// returns depth

void trackerSetMid(DefTracker *tracker);
void trackerStatsRecur(DefTracker *tracker);
void trackerStats(void);
void trackerOpen(DefTracker *tracker); // fills entries, does nothing if the tracker's already open
void trackerOpenEdit(DefTracker *tracker);
#if CLIENT
void trackerCloseEdit(DefTracker *tracker);
#endif
void trackerClose(DefTracker *tracker);
#if CLIENT
void trackerOpenNewer(DefTracker *tracker,U32 mod_time);
DefTracker *trackerUpdate(DefTracker *tracker,GroupDef *def,int force);
TrickNode *allocTrackerTrick(DefTracker *tracker);
#endif
void trackerGetMat(DefTracker *tracker,DefTracker *ref,Mat4 mat);
int trackerGetUID(DefTracker *tracker);
int trackerDepth(DefTracker *tracker);
DefTracker *trackerRoot(DefTracker *tracker);
int trackerRootID(DefTracker *tracker);
void editCacheClear(void);
void editCacheUpkeep(void);
// End mkproto
#endif
