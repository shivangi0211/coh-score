#ifndef _CLIENTCOMM_H
#define _CLIENTCOMM_H
#include "..\Common\ClientLogin\clientcommLogin.h"

typedef struct StashTableImp *StashTable;
typedef const struct StashTableImp *cStashTable;
typedef struct MapCon MapCon;
typedef struct EntCon EntCon;
typedef struct NetLink NetLink;
typedef struct Packet Packet;
typedef struct DbContainer DbContainer;
typedef struct ShardAccountCon ShardAccountCon;

extern StashTable	online_player_names;

// Generated by mkproto
int totalPlayersOnMap(MapCon* map);
int mapIsRunning(MapCon* map);
int determineStartMapId(int createLocation);
int findBestMapByBaseId(EntCon* ent_con, int map_id);
int playerNameExists(char* name, int* isempty);
int clientConnectedCount(void);
int clientLoginCount(void);
int clientQueuedCount(void);
//bool clientKickLogin(U32 user_id,int reason);
bool deletePlayer(int db_id, bool log, char *player_name, char *ipstr, char *accountname);
void clientClearDeadLinks(void);
void handlePlayerContainerLoaded(NetLink *link,int container_id, GameClientLink *client);
void handlePlayerContainerUpdated(int container_id);
ShardAccountCon *createShardAccountContainer(U32 auth_id, const char *auth_name);
void handleShardAccountContainerLoaded(GameClientLink *client, Packet *pak, DbContainer* container);
void reconnectClientCommPlayersToAuth(void);
const char *getAttribString(int idx);
void disconnectLinksByAuthId(U32 auth_id);
NetLink *linkFromAuthId(U32 auth_id, GameClientLink **link);
NetLink *linkFromAuthName(char *authname, GameClientLink **client);
NetLink *findLinkToClient(U32 auth_id, bool *is_direct_dest, int *dbid_dest);
__time32_t getAllowedAuthNames(char ***names);
int processGameClientMsg(Packet *pak,int cmd, NetLink *link);
int clientcomm_quitClient(NetLink *link, GameClientLink *client);

typedef void (*ClientLinkDoForAllCB)( NetLink* link, GameClientLink *gameClientOrNULL, bool direct, U32 auth_id, int dbId, void* userData );
void clientLinkDoForAll( ClientLinkDoForAllCB cb, void* userData );

typedef void (*MapLinkDoForAllCB)( NetLink* link, void* userData );
void mapLinkDoForAll( MapLinkDoForAllCB cb, void* userData );

bool clientcommKickLogin(U32 auth_id, char *authname,int reason);
void clientCommInit(void);
void clientCommInitStartListening(void);
// End mkproto

void clientcomm_PlayerLogin(GameClientLink *client);
GameClientLink *clientcomm_getGameClient(NetLink *lnk, Packet *pak);

typedef struct VipSqlCbData 
{
	void (*updateCallback)(struct VipSqlCbData*);
	GameClientLink *client;
	ShardAccountCon *shardaccount_con;
	Packet *pak_out;
} VipSqlCbData;

int genFakeAuthId(char * auth_name);
void updateVip(void (*onVipUpdateCallback)(VipSqlCbData*), GameClientLink *client, ShardAccountCon *shardaccount_con, Packet *pak_out);
void getEnts_sendPlayers(GameClientLink *client, ShardAccountCon *shardaccount_con);

void addSingleAutoPass(char *authname);

#endif
