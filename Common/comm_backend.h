#ifndef _COMM_BACKEND
#define _COMM_BACKEND

#include "network\netio.h"

#define DBSERVER_PROTOCOL_VERSION			20110503	// DbServer<->Mapserver<->ServerMonitor protocol number
#define DBSERVER_CLIENT_PROTOCOL_VERSION_LEGACY	20110614	// DbServer<->Client protocol number
#define DBSERVER_CLIENT_PROTOCOL_VERSION	20130316	// DbServer<->Client protocol number
#define DBSERVER_AUCTION_PROTOCOL_VERSION	20070427	// DbServer<->AuctionServer protocol number
#define DBSERVER_ACCOUNT_PROTOCOL_VERSION	20070925	// DbServer<->AccountServer protocol number
#define DBSERVER_MISSION_PROTOCOL_VERSION	20090309	// DbServer<->MissionServer protocol number
#define DBSERVER_QUEUE_PROTOCOL_VERSION	20100105	// DbServer<->QueueServer protocol number

// add new ports up here, counting backwards
#define DEFAULT_DBTURNSTILE_PORT					6971	// dbserver listens for turnstile server
#define DEFAULT_SVRMON_COMMAND_PORT					6972	// ServerMonitor listens for command requests
#define DEFAULT_QUEUESERVER_PORT					6973
#define DEFAULT_MISSIONSERVER_PORT					6974
#define DEFAULT_RELAYSERVER_PORT					6975	// relayserver JSON-RPC
#define DEFAULT_ACCOUNTSERVER_PORT					6976	// accountserver
#define DEFAULT_AUCTIONSERVER_HEROES_PORT			6977	// hero auction house
#define DEFAULT_AUCTIONSERVER_VILLAINS_PORT			6978	// villains auction house
#define DEFAULT_BEACONCLIENT_PORT					6979	// dbserver server listens for beacon cilents
#define DEFAULT_BEACONSERVER_PORT					6980	// dbserver server listens for beacon servers
#define DEFAULT_STATSERVER_PORT						6981	// stat server listens
#define DEFAULT_DBSTAT_PORT							6982	// dbserver listens for stat server
#define DEFAULT_ARENASERVER_PORT					6983	// arena server listens
#define DEFAULT_DBARENA_PORT						6984	// dbserver listens for arena server
#define DEFAULT_CHATMON_PORT						6985	// chatsever listens for servermonitors
#define DEFAULT_CHATSERVER_AUX_PORT					6986	// mapserver connects to chatserver & sends reserved name list
#define DEFAULT_PUBLICCHAT_PORT						6987
#define DEFAULT_CHATSERVER_PORT						6988
#define DEFAULT_LOG_PORT							6989
#define DEFAULT_SHARDMON_PORT						6990	// ServerMonitor listens for ShardMonitors
#define DEFAULT_CMDRELAY_PORT						6991
#define DEFAULT_DBCRASHMAP_PORT						6992
#define DEFAULT_SVRMON_LISTEN_PORT					6993	// ServerMonitor listens for SNMP monitoring requests
#define DEFAULT_UPDATESERVER_LISTEN_PORT			6993	// UpdateServer listens for SNMP monitoring requests
#define DEFAULT_UPDATESERVER_PORT					6994	// UpdateServer listens for CohUpdaters
#define DEFAULT_MAPSERVER_PORT						6995	// mapserver listens for game clients used for -localmapserver (editing / testing)
#define DEFAULT_SVRMON_PORT							6996	// dbserver listens for server monitors
#define DEFAULT_DB_PORT								6997	// dbserver listens for mapservers
#define DEFAULT_DBLAUNCHER_PORT						6998	// dbserver listens for launchers
#define DEFAULT_LAUNCHER_PORT						6999	// launcher listens for mapservers
#define DEFAULT_DBGAMECLIENT_PORT				   61000	// dbserver listens for game clients - public mapserver ports follow this port number sequentially
#define BASE_MAPSERVER_PORT							(DEFAULT_DBGAMECLIENT_PORT+1)

typedef enum
{
	CONTAINER_TESTDATABASETYPES = 0,
	CONTAINER_MAPS,
	CONTAINER_LAUNCHERS,
	CONTAINER_ENTS,
	CONTAINER_DOORS,
	CONTAINER_TEAMUPS,			// 5
	CONTAINER_SUPERGROUPS,
	CONTAINER_ATTRIBUTES,
	CONTAINER_EMAIL,
	CONTAINER_TASKFORCES,
	CONTAINER_PETITIONS,		// 10
	CONTAINER_CRASHEDMAPS,
	CONTAINER_MAPGROUPS,
	CONTAINER_ARENAEVENTS,
	CONTAINER_ARENAPLAYERS,
	CONTAINER_BASERAIDS,		// 15
	CONTAINER_BASE,
	CONTAINER_SGRPSTATS,
	CONTAINER_ITEMSOFPOWER,
	CONTAINER_ITEMOFPOWERGAMES,
	CONTAINER_OFFLINE,			// 20
	CONTAINER_SERVERAPPS,
	CONTAINER_SGRAIDINFO,
	CONTAINER_MININGACCUMULATOR,
	CONTAINER_LEVELINGPACTS,	
	CONTAINER_RAIDS,			// 25
	CONTAINER_LEAGUES,
	CONTAINER_EVENTHISTORY,
	CONTAINER_AUTOCOMMANDS,
	CONTAINER_SHARDACCOUNT,

	// if any containers get above 31, adjust DbList.owner_notify_mask
	MAX_CONTAINER_TYPES
} ContainerType;
#define CONTAINER_IS_VALID(c) (c >= 1 && c < MAX_CONTAINER_TYPES)

#define CONTAINER_IS_GROUP(c)			(	c == CONTAINER_TEAMUPS ||		\
											c == CONTAINER_SUPERGROUPS ||	\
											c == CONTAINER_TASKFORCES ||	\
											c == CONTAINER_MAPGROUPS ||		\
											c == CONTAINER_RAIDS ||			\
											c == CONTAINER_LEAGUES ||			\
											c == CONTAINER_LEVELINGPACTS )

#define CONTAINER_IS_STATSERVER_GROUP(c) (	c == CONTAINER_SUPERGROUPS ||	\
											c == CONTAINER_RAIDS ||			\
											c == CONTAINER_LEAGUES ||		\
											c == CONTAINER_LEVELINGPACTS )

#define CONTAINER_IS_STATSERVER_OWNED(c) (	c == CONTAINER_RAIDS ||			\
											c == CONTAINER_LEAGUES ||		\
											c == CONTAINER_LEVELINGPACTS )


typedef enum ContainerCmd
{
	CONTAINER_CMD_DONT_LOCK,
	CONTAINER_ERR_DOESNT_EXIST = 1,
	CONTAINER_ERR_ALREADY_LOCKED,
	CONTAINER_CMD_UNLOCK,
	CONTAINER_CMD_LOCK,
	CONTAINER_CMD_DELETE,
	CONTAINER_CMD_CREATE,
	CONTAINER_CMD_UNLOCK_NOMODIFY,	// unlock container, and leave old contents
	CONTAINER_CMD_LOCK_AND_LOAD,	// load from sql if not already in dbserver cache
	CONTAINER_CMD_TEMPLOAD,			// if not loaded, load, process, then free
	CONTAINER_ERR_NOT_LOCKED,
	CONTAINER_ERR_CANT_COMPLETE,
	CONTAINER_ERR_CANT_COMPLETE_SERIOUS,
	CONTAINER_CMD_LOAD_ALL,			// load every container and return full list, not locked
	CONTAINER_CMD_CREATE_MODIFY,	// create or modify container, not locked
	CONTAINER_CMD_REFLECT,			// don't modify container at all, just reflect
	CONTAINER_CMD_TEMPLOAD_OFFLINE,	// does TEMPLOAD, if that fails, tries to load an offline char, then free without moving it online
} ContainerCmd;

typedef enum PetitionCategory
{
	PETITIONCATEGORY_BUGREPORT_DEPRECATED,	// 0 = (NO LONGER USED) --> "Bug Report"
	PETITIONCATEGORY_STUCK,					// 1 = "Stuck"
	PETITIONCATEGORY_CHEATING,				// 2 = "Exploits and Cheating"
	PETITIONCATEGORY_FEEDBACK,				// 3 = "Feedback and Suggestions"
	PETITIONCATEGORY_CONDUCT,				// 4 = "Harassment and Conduct"
	PETITIONCATEGORY_TECHNICAL,				// 5 = "Technical Issues"
	PETITIONCATEGORY_GENERAL,				// 6 = "General Help"
} PetitionCategory;


// messages from DBServer to Mapserver
enum
{
	DBSERVER_TIMEOFFSET = COMM_MAX_CMD,
	DBSERVER_CONNECT_DENIED,
	DBSERVER_CONTAINERS,
	DBSERVER_CONTAINER_INFO,
	DBSERVER_DISCONNECT_ACK,
	DBSERVER_CONTAINER_STATUS,
	DBSERVER_CONTAINER_ACK,
	DBSERVER_TEST_MAP_XFER,
	DBSERVER_MAP_REG_CALLBACK,
	DBSERVER_SEND_DOORS,
	DBSERVER_BROADCAST_MSG,
	DBSERVER_SEND_ENT_NAMES,
	DBSERVER_SEND_GROUP_NAMES,
	DBSERVER_FORCE_LOGOUT,
	DBSERVER_CONTAINER_ID,
	DBSERVER_SHUTDOWN,
	DBSERVER_WHO,
	DBSERVER_RELAY_CMD,
	DBSERVER_LOST_MEMBERSHIP,
	DBSERVER_CLIENT_CMD_FAILED,
	DBSERVER_SEND_MAPNAMES,
	DBSERVER_SEND_DELETED_CHARS,
	DBSERVER_OFFLINE_RESTORE_RSLT,
	DBSERVER_OFFLINE_CHARACTER_RSLT,
	DBSERVER_ONLINE_ENTS,
	DBSERVER_MAP_XFER_LOADING,
	DBSERVER_MAP_XFER_READY,
	DBSERVER_MAP_XFER_OK,
	DBSERVER_MAP_XFER_FAIL,
	DBSERVER_CUSTOM_DATA,
	DBSERVER_CLEAR_PNAME_CACHE_ENTRY,
	DBSERVER_TEAM_LEFT_MISSION,
	DBSERVER_RELAY_CMD_RESPONSE,
	DBSERVER_ARENA_ADDRESS,
	DBSERVER_ONLINE_ENT_COMMENTS,
	DBSERVER_SG_ELDEST_ON,
	DBSERVER_SG_CHANNEL_INVITE,
	DBSERVER_SGRP_STATSADJ,					// send a command to the stat server
	DBSERVER_CONTAINER_SERVER_ACK,
	DBSERVER_CONTAINER_SERVER_NOTIFY,
	DBSERVER_CONTAINER_RELAY,
	DBSERVER_CONTAINER_RECEIPT,
	DBSERVER_CONTAINER_REFLECT,
	DBSERVER_MISSION_PLAYER_COUNT,
	DBSERVER_SEND_STATSERVER_CMD,
	DBSERVER_BACKUP_SEARCH,
	DBSERVER_BACKUP_APPLY,
	DBSERVER_BACKUP_VIEW,
	DBSERVER_SOME_ONLINE_ENTS,
	DBSERVER_AUCTION_SEND_INV, // update dbocmm.c:dbMessageCallback and auction_dbMessageCallback
	DBSERVER_AUCTION_SEND_HIST,
	DBSERVER_AUCTION_XACT_CMD,
	DBSERVER_AUCTION_XACT_ABORT, // obsolete?
	DBSERVER_AUCTION_XACT_COMMIT, // obsolete?
	DBSERVER_MININGDATA_RELAY,
	DBSERVER_AUCTION_XACT_FAIL,
	DBSERVER_AUCTION_BATCH_INFO,
	DBSERVER_ACCOUNTSERVER_NOTIFYREQUEST,
	DBSERVER_ACCOUNTSERVER_NOTIFYTRANSACTION,
	DBSERVER_ACCOUNTSERVER_NOTIFYSAVED,
	DBSERVER_ACCOUNTSERVER_CATALOG,
	DBSERVER_ACCOUNTSERVER_CLIENTAUTH,
	DBSERVER_ACCOUNTSERVER_PLAYNC_AUTH_KEY,
	DBSERVER_ACCOUNTSERVER_CHARCOUNT,
	DBSERVER_ACCOUNTSERVER_INVENTORY,
	DBSERVER_ACCOUNTSERVER_LOYALTY,
	DBSERVER_CHECK_NAME,
	DBSERVER_MISSIONSERVER_SEARCHPAGE,
	DBSERVER_MISSIONSERVER_ARCINFO,
	DBSERVER_MISSIONSERVER_ARCDATA,
	DBSERVER_MISSIONSERVER_INVENTORY,
	DBSERVER_MISSIONSERVER_CLAIM_TICKETS,
	DBSERVER_SEND_STATSERVER_INACTIVE_ACCOUNT,
	DBSERVER_MESSAGEENTITY,
	DBSERVER_CREATE_EMAIL,
	DBSERVER_MISSIONSERVER_ITEM_BOUGHT,
	DBSERVER_MISSIONSERVER_ITEM_REFUND,
	DBSERVER_MISSIONSERVER_OVERFLOW_GRANTED,
	DBSERVER_MISSIONSERVER_ALLARCS,
	DBSERVER_MISSIONSERVER_BAN_STATUS,
	DBSERVER_OVERRIDDEN_AUTHBITS,
	DBSERVER_EVENT_WAIT_TIMES,					// turnstile server
	DBSERVER_QUEUE_STATUS,						// turnstile server
	DBSERVER_EVENT_READY,						// turnstile server
	DBSERVER_EVENT_READY_ACCEPT,				// turnstile server
	DBSERVER_EVENT_FAILED_START,				// turnstile server
	DBSERVER_MAP_START,							// turnstile server
	DBSERVER_EVENT_START,						// turnstile server
	DBSERVER_TURNSTILE_PONG,					// turnstile server
	DBSERVER_MISSIONSERVER_ARCDATA_OTHERUSER,
	DBSERVER_DISABLED_ZONE_EVENTS,
	DBSERVER_NOTIFY_REACTIVATION,
	DBSERVER_EVENTHISTORY_RESULTS,
	DBSERVER_REJOIN_FAIL,						// turnstile server
	DBSERVER_ACCOUNTSERVER_CERTIFICATION_GRANT,
	DBSERVER_ACCOUNTSERVER_CERTIFICATION_CLAIM,
	DBSERVER_ACCOUNTSERVER_CERTIFICATION_REFUND,
	DBSERVER_UPDATE_LOG_LEVELS,
	DBSERVER_TEST_LOG_LEVELS,
	DBSERVER_ACCOUNTSERVER_MULTI_GAME_TRANSACTION,
	DBSERVER_ACCOUNTSERVER_MULTI_GAME_TRANSACTION_COMPLETED,
	DBSERVER_CLIENT_MESSAGE,
	// Only add things to the *end* of this enum!
	// Or change the DbServer<->Mapserver version number if you remove anything
	DBSERVER_NUMCMDS,
};

// mapserver to dbserver
enum
{
	DBCLIENT_INITIAL_CONNECT = COMM_MAX_CMD,	// 2
	DBCLIENT_READY,								// 3
	DBCLIENT_MESSAGE,							// 4
	DBCLIENT_REGISTER,							// 5
	DBCLIENT_CONTAINER_INFO,					// 6
	DBCLIENT_DISCONNECT,						// 7
	DBCLIENT_REQ_CONTAINERS,					// 8
	DBCLIENT_SET_CONTAINERS,					// 9
	DBCLIENT_REQ_CONTAINER_STATUS,				// 10
	DBCLIENT_REQUEST_MAP_XFER,					// 11
	DBCLIENT_MAP_XFER,							// 12
	DBCLIENT_TEST_MAP_XFER,						// 13
	DBCLIENT_CONTAINER_ACK,						// 14
	DBCLIENT_SEND_DOORS,						// 15
	DBCLIENT_SAVELISTS,							// 16
	DBCLIENT_ADDDEL_MEMBERS,					// 17
	DBCLIENT_PLAYER_DISCONNECT,					// 18
	DBCLIENT_SEND_MSG,							// 19
	DBCLIENT_REQ_GROUP_NAMES,					// 20
	DBCLIENT_REQ_ENT_NAMES,						// 21
	DBCLIENT_CONTAINER_FIND_BY_ELEMENT,			// 22
	DBCLIENT_SHUTDOWN,							// 23
	DBCLIENT_WHO,								// 24
	DBCLIENT_SERVER_STATS_UPDATE,				// 25
	DBCLIENT_RELAY_CMD,							// 26
	DBCLIENT_REQ_ONLINE_ENTS,					// 27
	DBCLIENT_REQ_ONLINE_ENT_COMMENTS,			// 28
	DBCLIENT_READY_FOR_PLAYERS,					// 29
	DBCLIENT_PLAYER_KICKED,						// 30
	DBCLIENT_REQ_CUSTOM_DATA,					// 31
	DBCLIENT_EXECUTE_SQL,						// 32
	DBCLIENT_DISCONNECT_MAPSERVER,				// 33
	DBCLIENT_PLAYER_RENAME,						// 34
	DBCLIENT_RELAY_CMD_BYENT,					// 35
	DBCLIENT_REQ_ARENA_ADDRESS,					// 36
	DBCLIENT_REQ_SG_ELDEST_ON,					// 37
	DBCLIENT_REQ_SG_CHANNEL_INVITE,				// 38
	DBCLIENT_RELAY_CMD_TOGROUP,					// 39
	DBCLIENT_SGRP_STATSADJ,						// 40 send a sgrp stat update to the stat server
	DBCLIENT_REGISTER_CONTAINER_SERVER,			// 41
	DBCLIENT_REGISTER_CONTAINER_SERVER_NOTIFY,	// 42
	DBCLIENT_CONTAINER_RELAY,					// 43
	DBCLIENT_CONTAINER_RECEIPT,					// 44
	DBCLIENT_CONTAINER_REFLECT,					// 45
	DBCLIENT_DESTROY_BASE,						// 46
	DBCLIENT_MISSION_PLAYER_COUNT,				// 47
	DBCLIENT_REQUEST_SHUTDOWN,					// 48
	DBCLIENT_SEND_STATSERVER_CMD,				// 49
	DBCLIENT_EMERGENCY_SHUTDOWN,				// 50
	DBCLIENT_OFFLINE_CHAR,						// 51
	DBCLIENT_PLAYER_CHANGETYPE,					// 52
	DBCLIENT_BACKUP,							// 53
	DBCLIENT_BACKUP_SEARCH,						// 54
	DBCLIENT_BACKUP_APPLY,						// 55
	DBCLIENT_BACKUP_VIEW,						// 56
	DBCLIENT_REQ_SOME_ONLINE_ENTS,				// 57
	DBCLIENT_OVERRIDE_START_ZONE,				// 58 Deprecated.
	DBCLIENT_AUCTION_REQ_INV,					// 59 GET PLAYER'S INVENTORY
	DBCLIENT_AUCTION_REQ_HISTINFO,				// 60
	DBCLIENT_AUCTION_XACT_REQ,					// 61
	DBCLIENT_AUCTION_XACT_UPDATE,				// 62
	DBCLIENT_MININGDATA_RELAY,					// 63
	DBCLIENT_SEND_AUCTIONSERVER_CMD,			// 64
	DBCLIENT_ACCOUNTSERVER_CMD,					// 65
	DBCLIENT_ACCOUNTSERVER_SHARDXFER,			// 66
	DBCLIENT_ACCOUNTSERVER_ORDERRENAME,			// 67
	DBCLIENT_ACCOUNTSERVER_UPDATE_EMAIL_STATS,	// 68
	DBCLIENT_ACCOUNTSERVER_CHARCOUNT,			// 69
	DBCLIENT_DEPRECATED_1,						// 70 was DBCLIENT_ACCOUNTSERVER_GET_BILLING_PROFILE
	DBCLIENT_DEPRECATED_2,						// 71 was DBCLIENT_ACCOUNTSERVER_AUTH
	DBCLIENT_DEPRECATED_3,						// 72 was DBCLIENT_ACCOUNTSERVER_PAYMENT_PREVIEW
	DBCLIENT_DEPRECATED_4,						// 73 was DBCLIENT_ACCOUNTSERVER_PURCHASE
	DBCLIENT_RENAME_RESPONSE,					// 74
	DBCLIENT_CHECK_NAME_RESPONSE,				// 75
	DBCLIENT_ACCOUNTSERVER_GET_INVENTORY,		// 76
	DBCLIENT_ACCOUNTSERVER_CHANGE_INV,			// 77
	DBCLIENT_DEPRECATED_5,						// 78 was DBCLIENT_ACCOUNTSERVER_CHANGE_INV_DUAL,		
	DBCLIENT_MISSIONSERVER_COMMAND,				// 79
	DBCLIENT_MISSIONSERVER_PUBLISHARC,			// 80
	DBCLIENT_MISSIONSERVER_UNPUBLISHARC,		// 81 // deprecated
	DBCLIENT_MISSIONSERVER_VOTEFORARC,			// 82
	DBCLIENT_ACCOUNTSERVER_ORDERRESPEC,			// 83
	DBCLIENT_DEPRECATED_6,						// 84 was DBCLIENT_ACCOUNTSERVER_GENERIC_PRODUCT
	DBCLIENT_MISSIONSERVER_SEARCHPAGE,			// 85
	DBCLIENT_MISSIONSERVER_ARCINFO,				// 86
	DBCLIENT_MISSIONSERVER_ARCDATA,				// 87
	DBCLIENT_MISSIONSERVER_INVENTORY,			// 88
	DBCLIENT_MISSIONSERVER_CLAIM_TICKETS,		// 89
	DBCLIENT_ACCOUNTSERVER_GET_ACTIVE_ACCOUNT,	// 90
	DBCLIENT_MISSIONSERVER_BUY_ITEM,			// 91
	DBCLIENT_MISSIONSERVER_SETKEYWORDSFORARC,	// 92
	DBCLIENT_MISSIONSERVER_ALLARCS,				// 93
	DBCLIENT_DELETE_PLAYER,						// 94
	DBCLIENT_MISSIONSERVER_BANSTATUS,			// 95
	DBCLIENT_PLAYER_CHANGEPRAETORIANPROGRESS,	// 96
	DBCLIENT_RESTORE_DELETED_CHAR,				// 97
	DBCLIENT_LIST_DELETED_CHARS,				// 98
	DBCLIENT_PLAYER_CHANGESUBTYPE,				// 99
	DBCLIENT_PLAYER_CHANGEINFLUENCETYPE,		// 100
	DBCLIENT_AUCTION_PURGE_FAKE,				// 101
	DBCLIENT_AUCTION_XACT_MULTI_REQ,			// 102
	DBCLIENT_QUEUE_FOR_EVENTS,					// 103 -- turnstile server
	DBCLIENT_REMOVE_FROM_QUEUE,					// 104 -- turnstile server
	DBCLIENT_EVENT_READY_ACK,					// 105 -- turnstile server
	DBCLIENT_EVENT_RESPONSE,					// 106 -- turnstile server
	DBCLIENT_MAP_ID,							// 107 -- turnstile server
	DBCLIENT_TURNSTILE_PING,					// 108 -- turnstile server
	DBCLIENT_MISSIONSERVER_ARCDATA_OTHERUSER,	// 109
	DBCLIENT_DEPRECATED,						// 110
	DBCLIENT_DEBUG_SHARD_XFER_OUT,				// 111 -- turnstile server
	DBCLIENT_DEBUG_SHARD_XFER_BACK,				// 112 -- turnstile server
	DBCLIENT_GROUP_UPDATE,						// 113 -- turnstile server
	DBCLIENT_EVENTHISTORY_FIND,					// 114
	DBCLIENT_CLOSE_INSTANCE,					// 115 -- turnstile server
	DBCLIENT_REJOIN_INSTANCE,					// 116 -- turnstile server
	DBCLIENT_PLAYER_LEAVE,						// 117 -- turnstile server
	DBCLIENT_ACCOUNTSERVER_CERTIFICATION_GRANT,// 118 
	DBCLIENT_ACCOUNTSERVER_CERTIFICATION_GRANT_FINISH, // 118, deprecated
	DBCLIENT_ACCOUNTSERVER_CERTIFICATION_REFUND,// 119 
	DBCLIENT_ACCOUNTSERVER_CERTIFICATION_CLAIM, // 120
	DBCLIENT_ACCOUNTSERVER_CERTIFICATION_CLAIM_FINISH, // 121, deprecated
	DBCLIENT_ACCOUNTSERVER_CERTIFICATION_TEST,	// 122
	DBCLIENT_MAP_WEEKLY_TF_ADD_TOKEN,			// 123
	DBCLIENT_MAP_WEEKLY_TF_REMOVE_TOKEN,		// 124
	DBCLIENT_MAP_WEEKLY_TF_SET_EPOCH_TIME,		// 125
	DBCLIENT_TEST_LOGGING,						// 126
	DBCLIENT_INCARNATETRIAL_COMPLETE,			// 127 -- turnstile server
	DBCLIENT_QUEUE_FOR_SPECIFIC_MISSION_INSTANCE,	//	128 -- turnstile server
	DBCLIENT_TS_ADD_BAN_DBID,						//	129 -- turnstile server
	DBCLIENT_ACCOUNTSERVER_LOYALTY_CHANGE,		// 130
	DBCLIENT_ACCOUNTSERVER_LOYALTY_EARNED_CHANGE,// 131
	DBCLIENT_ACCOUNTSERVER_LOYALTY_RESET,		// 132
	DBCLIENT_ACCOUNTSERVER_JUST_KIDDING,		// 133
	DBCLIENT_MAP_SET_MARTY_STATUS,				// 134
	DBCLIENT_GRANT_CHARSLOT,					// 135
	DBCLIENT_PLAYER_UNLOCK,						// 136
	DBCLIENT_UNLOCK_CHARACTER_RESPONSE,			// 137
	DBCLIENT_GET_PLAYNC_AUTH_KEY,				// 138
	DBCLIENT_DEBUG_SET_VIP,						// 139
	DBCLIENT_ACCOUNTSERVER_RECOVER_UNSAVED,		// 140
	DBCLIENT_ACCOUNT_ADJUST_SERVER_SLOTS,		// 141
	DBCLIENT_ACCOUNTSERVER_TRANSACTION_FINISH,	// 142
	DBCLIENT_ACCOUNTSERVER_MULTI_GAME_TRANSACTION,	// 143

	// Only add things to the *end* of this enum!
	// Or change the DbServer<->Mapserver version number if you remove anything
	DBCLIENT_NUMCMDS,
};


// DBServer to client
//		If you add new transactions to this list, make certain there you add a new handler in QueueServer.c
enum
{
	DBGAMESERVER_SEND_PLAYERS = COMM_MAX_CMD,
	DBGAMESERVER_MSG,
	DBGAMESERVER_MAP_CONNECT,
	DBGAMESERVER_DELETE_OK,
	DBGAMESERVER_SEND_COSTUME,
	DBGAMESERVER_SEND_POWERSET_NAMES,
	DBGAMESERVER_ACCOUNTSERVER_CHARCOUNT,
	DBGAMESERVER_ACCOUNTSERVER_CATALOG,
	DBGAMESERVER_ACCOUNTSERVER_CLIENTAUTH,
	DBGAMESERVER_ACCOUNTSERVER_PLAYNC_AUTH_KEY,
	DBGAMESERVER_ACCOUNTSERVER_NOTIFYREQUEST,
	DBGAMESERVER_ACCOUNTSERVER_INVENTORY,
	DBGAMESERVER_ACCOUNTSERVER_UNAVAILABLE,
	DBGAMESERVER_CONPRINT,
	DBGAMESERVER_RENAME_RESPONSE,
	DBGAMESERVER_UNLOCK_CHARACTER_RESPONSE,
	DBGAMESERVER_CHECK_NAME_RESPONSE,
	DBGAMESERVER_LOGIN_DIALOG_RESPONSE,
	DBGAMESERVER_QUEUE_POSITION,
	DBGAMESERVER_CAN_START_STATIC_MAP_RESPONSE,
	// this is communication that only happens with the queue server
	QUEUESERVER_SVR_CONNECT,
	QUEUESERVER_SVR_ERROR,
	QUEUESERVER_SVR_ENQUEUESTATUS,
	QUEUESERVER_SVR_UPDATE,
	QUEUESERVER_SVR_REMOVECLIENT,
	QUEUESERVER_SVR_SET_LOG_LEVELS,
	QUEUESERVER_SVR_TEST_LOG_LEVELS,
};

// client to DBServer
//		If you add new transactions to this list, make certain there you add a new handler in QueueServer.c
enum
{
	DBGAMECLIENT_LOGIN = COMM_MAX_CMD,
	DBGAMECLIENT_CHOOSE_PLAYER,
	DBGAMECLIENT_MAKE_PLAYER_ONLINE,
	DBGAMECLIENT_DELETE_PLAYER,
	DBGAMECLIENT_GET_COSTUME,
	DBGAMECLIENT_GET_POWERSET_NAMES,
	DBGAMECLIENT_ACCOUNTSERVER_UNSECURE_CMD,
	DBGAMECLIENT_ACCOUNTSERVER_CHARCOUNT,
	DBGAMECLIENT_ACCOUNTSERVER_CATALOG,
	DBGAMECLIENT_ACCOUNTSERVER_LOYALTY_BUY,
	DBGAMECLIENT_ACCOUNTSERVER_LOYALTY_REFUND,
	DBGAMECLIENT_SHARD_XFER_TOKEN_REDEEM,
	DBGAMECLIENT_RENAME_CHARACTER,
	DBGAMECLIENT_RENAME_TOKEN_REDEEM,
	DBGAMECLIENT_RESEND_PLAYERS,
	DBGAMECLIENT_CHECK_NAME,
	DBGAMECLIENT_SLOT_TOKEN_REDEEM,
	DBGAMECLIENT_UNLOCK_CHARACTER,
	DBGAMECLIENT_QUITCLIENT,
	DBGAMECLIENT_SIGN_NDA,
	DBGAMECLIENT_GET_PLAYNC_AUTH_KEY,
	DBGAMECLIENT_CAN_START_STATIC_MAP,
	// this is communication that only happens with the queue server.
	QUEUECLIENT_CONNECT,	//update QUEUECLIENT_COMMANDSTART if you add queue talk before this.
	QUEUECLIENT_UPDATE_REQUEST,
	QUEUECLIENT_CLIENTCOMMAND,
	QUEUECLIENT_CLIENTPLAY,
	QUEUECLIENT_REMOVECLIENT,
	// "fast" login for a visiting character.
	DBGAMECLIENT_CHOOSE_VISITING_PLAYER,

	// sharing with accountserver for testing only
	DBGAMECLIENT_RESERVED = DBCLIENT_ACCOUNTSERVER_CMD,
	QUEUECLIENT_COMMANDSTART = QUEUECLIENT_CONNECT,
};

enum
{
	DBGAMECLIENT_CREATE_PLAYER_PRIMAL_TUTORIAL,
	DBGAMECLIENT_CREATE_PLAYER_PRIMAL_HERO,
	DBGAMECLIENT_CREATE_PLAYER_PRIMAL_VILLAIN,
	DBGAMECLIENT_CREATE_PLAYER_PRAETORIAN_TUTORIAL,
	DBGAMECLIENT_CREATE_PLAYER_PRAETORIAN_LOYALIST,
	DBGAMECLIENT_CREATE_PLAYER_PRAETORIAN_RESISTANCE,
	DBGAMECLIENT_CREATE_PLAYER_PRIMAL_HERO_TUTORIAL,
	DBGAMECLIENT_CREATE_PLAYER_PRIMAL_VILLAIN_TUTORIAL,
};

enum // Messages sent from launcher to DbServer
{
	LAUNCHERANSWER_PROCESSES = COMM_MAX_CMD,
	LAUNCHERANSWER_LOCALONLY,
	LAUNCHERANSWER_GAMEVERSION,
	LAUNCHERANSWER_PROCESS_CLOSED,
	LAUNCHERANSWER_PROCESS_CRASHED,
};

enum // Messages sent from DbServer to launcher
{
	LAUNCHERQUERY_REGISTER = COMM_MAX_CMD,
	LAUNCHERQUERY_STARTPROCESS,
	LAUNCHERQUERY_GAMEVERSION,
	LAUNCHERQUERY_CONTROL,
};

enum // Messages sent from turnstile to DbServer
{
	TURNSTILE_REGISTER = COMM_MAX_CMD,
	TURNSTILE_EVENT_WAIT_TIMES,
	TURNSTILE_QUEUE_STATUS,
	TURNSTILE_EVENT_READY,
	TURNSTILE_EVENT_READY_ACCEPT,
	TURNSTILE_EVENT_FAILED_START,
	TURNSTILE_MAP_START,
	TURNSTILE_EVENT_START,
	TURNSTILE_SHARD_XFER,
	TURNSTILE_COOKIE_REQUEST,
	TURNSTILE_COOKIE_REPLY,
	TURNSTILE_REJOIN_FAIL,
};

enum // Messages sent from DbServer to turnstile
{
	DBSERVER_REGISTER_ACK = COMM_MAX_CMD,
	DBSERVER_QUEUE_FOR_EVENTS,
	DBSERVER_REMOVE_FROM_QUEUE,
	DBSERVER_EVENT_READY_ACK,
	DBSERVER_EVENT_RESPONSE,
	DBSERVER_MAP_ID,
	DBSERVER_DEBUG_SHARD_XFER_OUT,
	DBSERVER_DEBUG_SHARD_XFER_BACK,
	DBSERVER_COOKIE_REQUEST,
	DBSERVER_COOKIE_REPLY,
	DBSERVER_GROUP_UPDATE,
	DBSERVER_REQUEST_QUEUE_STATUS,
	DBSERVER_CLOSE_INSTANCE,
	DBSERVER_REJOIN_INSTANCE,
	DBSERVER_PLAYER_LEAVE,
	DBSERVER_INCARNATETRIAL_COMPLETE,
	DBSERVER_TS_CRASHEDMAP,
	DBSERVER_QUEUE_FOR_SPECIFIC_MISSION_INSTANCE,
	DBSERVER_TS_ADD_BAN_DBID,
};

enum // Messages sent to arenaserver
{
	ARENACLIENT_REQKIOSK = COMM_MAX_CMD,
	ARENACLIENT_REQJOINEVENT,
	ARENACLIENT_REQDROPEVENT,
	ARENACLIENT_REGISTERPLAYERS,
	ARENACLIENT_REQEVENT,
	ARENACLIENT_CREATEEVENT,
	ARENACLIENT_DESTROYEVENT,
	ARENACLIENT_SETSIDE,
	ARENACLIENT_SETMAP,
	ARENACLIENT_REQPLAYERUPDATE,
	ARENACLIENT_CREATORUPDATE,
	ARENACLIENT_PLAYERUPDATE,
	ARENACLIENT_FULLPLAYERUPDATE,
	ARENACLIENT_MAPRESULTS,
	ARENACLIENT_FEEPAYMENT,
	ARENACLIENT_CONFIRM_REWARD,
	ARENACLIENT_REQRESULTS,
	ARENACLIENT_PLAYERATTRIBUTEUPDATE,
	ARENACLIENT_CLEARPLAYERSGRATINGS,
	ARENACLIENT_REQLEADERS,
	ARENACLIENT_REQPLAYERSTATS,
	ARENACLIENT_READYACK,
	ARENACLIENT_REPORTKILL,
	ARENACLIENT_SET_LOG_LEVELS,
	ARENACLIENT_TEST_LOG_LEVELS,

	ARENACLIENT_MAX_CMD,
};

enum // Messages sent from arenaserver
{
	ARENASERVER_KIOSK = COMM_MAX_CMD,
	ARENASERVER_RESULT,
	ARENASERVER_EVENTUPDATE,
	ARENASERVER_REQREADY,
	ARENASERVER_PARTICIPANTUPDATE,
	ARENASERVER_PLAYERUPDATE,
	ARENASERVER_REQRESULTS,
	ARENASERVER_LEADERUPDATE,
	ARENASERVER_PLAYERSTATS,
	ARENASERVER_SENDNOTREADYMESSAGE,
	ARENASERVER_SENDNEXTROUNDMESSAGE,
	ARENASERVER_REPORTKILLACK,

	ARENASERVER_MAX_CMD,
};

enum // Messages to raidserver
{
	RAIDCLIENT_RAID_CHALLENGE = ARENACLIENT_MAX_CMD,
	RAIDCLIENT_BASE_UPDATE,
	RAIDCLIENT_RAID_COMPLETE,
	RAIDCLIENT_RAID_PARTICIPATE,
	RAIDCLIENT_RAID_REQ_LIST,
	RAIDCLIENT_RAID_SET_WINDOW,
	RAIDCLIENT_RAID_BASE_SETTINGS,
	RAIDCLIENT_RAID_SCHEDULE,
	RAIDCLIENT_RAID_CANCEL,
	RAIDCLIENT_NOTIFY_VILLAINSG,
	RAIDCLIENT_ITEM_OF_POWER_GRANT_NEW, //Grant a random Item of Power to this SG from those still available
	RAIDCLIENT_ITEM_OF_POWER_GRANT, //Grant a particluar Item of Power to this SG
	RAIDCLIENT_ITEM_OF_POWER_REVOKE, //Revoke a particular item of Power from this SG
	RAIDCLIENT_ITEM_OF_POWER_TRANSFER, //Transfer This Item of Power from one SG to another
	RAIDCLIENT_ITEM_OF_POWER_SG_SYNCH,
	RAIDCLIENT_ITEM_OF_POWER_UPDATE, //Give this super group all its Item of Power info.
	RAIDCLIENT_ITEM_OF_POWER_GAME_SET_STATE, //Set the state of the Item Of Power Game
	RAIDCLIENT_ITEM_OF_POWER_GAME_REQUEST_UPDATE, //Request an update of the current Item of Power Game stat
	RAIDCLIENT_SETVAR,
	RAIDCLIENT_SET_LOG_LEVELS,
	RAIDCLIENT_TEST_LOG_LEVELS,
};

enum // Messages sent from raidserver
{
	RAIDSERVER_RAIDLIST = ARENASERVER_MAX_CMD,	 // using same server for now
};

typedef enum // results of arenaserver requests
{
	ARENA_ERR_NONE,
	ARENA_SUCCESS,
	ARENA_ERR_BADEVENT,
	ARENA_ERR_DISALLOWED,
	ARENA_ERR_UNKNOWN,
	ARENA_ERR_POPUP,
} ArenaServerResult;

// Patch server related packet type ID
enum
{
	PS_RESPONSE = COMM_MAX_CMD,
	PC_COMMAND,
	PC_COMMAND_MAX,
};

// File transfer related packet type ID
// The patch server command ID's and the net file transfer command ID's must not overlap.
enum
{
	NETTRANS_DATA = PC_COMMAND_MAX,
	NETTRANS_BEGIN,
	NETTRANS_BEGIN_ACK,
	NETTRANS_END,
	NETTRANS_END_ACK,
};

// ServerMonitor commands
// You CAN NOT rearrange this list or add something to the middle
// Exception: Jan/06 rearranged to purposefully make it not backwards compatible
enum
{
	DBSVRMON_EXEC = COMM_MAX_CMD,	// Request to exec a process on a specified IP
	DBSVRMON_REQUEST,		// Request a full update of all containers
	DBSVRMON_REQUESTDIFF,	// Request a diff of all containers
	DBSVRMON_LAUNCHERS,		// Response containing launcher list
	DBSVRMON_MAPSERVERS,	// Response containing mapserverlist
	DBSVRMON_CRASHEDMAPSERVERS,	// Response containing crashed mapserverlist
	DBSVRMON_PLAYERS,		// Response containing player list
	DBSVRMON_RELAYMESSAGE,	// Used to send any message a mapserver might send (delink, shutdown)
	DBSVRMON_REQUESTVERSION,// Request/response to know the version the server is running
	DBSVRMON_REQUEST_PLAYERS,// Request to start/stop receiving player updates
	DBSVRMON_CONNECT,		// Sends version number and asks to receive updates
	DBSVRMON_DBSTATS,		// Response containing general DbServer stats
	DBSVRMON_SERVERAPPS,	// Response containing server app list
	DBSVRMON_LOGSERVERSTATS,// Request/response for log server stats
};


enum LOGSERVER
{
	LOGSERVER_SHARDCHAT = COMM_MAX_CMD,
	LOGSERVER_SEND_ZEROMQ_STATUS,
};

enum
{
	LOGCLIENT_LOG = COMM_MAX_CMD,
	LOGCLIENT_SHARDCHAT,
	LOGCLIENT_SAVELISTS,
	LOGCLIENT_LOGBUG,
	LOGCLIENT_LOGPRINTF,
	LOGCLIENT_ZEROMQ_SET_CONNECT_STATE,
	LOGCLIENT_ZEROMQ_GET_STATUS,
};

enum
{
	SHARDCOMM_CMD = COMM_MAX_CMD,
	SHARDCOMM_SET_LOG_LEVELS,
	SHARDCOMM_TEST_LOG_LEVELS,
	SHARDCOMM_ADMIN_CONNECT,
	SHARDCOMM_ADMIN_RECV_BATCH_OK,
};

enum
{
	SHARDCOMM_SVR_CMD = COMM_MAX_CMD,
	SHARDCOMM_SVR_BAD_PROTOCOL,
	SHARDCOMM_SVR_READY_FOR_LOGIN,
	SHARDCOMM_SVR_USER_LIST,
	SHARDCOMM_SVR_CHANNEL_LIST,
	SHARDCOMM_SVR_UPLOAD_COMPLETE,
};

enum
{
	SHARDCOMM_AUX_RESERVED_NAMES = COMM_MAX_CMD
};

typedef enum ShardcommAuction
{
	SHARDCOMM_AUCTION_CONNECT = COMM_MAX_CMD
} ShardcommAuction;

typedef enum AuctionClientMsgs
{
	AUCTION_CLIENT_CONNECT = COMM_MAX_CMD,
	AUCTION_CLIENT_CHARACTER_SEND,
	AUCTION_CLIENT_INVENTORY_REQUEST,
	AUCTION_CLIENT_HISTORYINFO_REQUEST,
	AUCTION_CLIENT_XACT_REQ,
	AUCTION_CLIENT_XACT_MULTI_REQ,
	AUCTION_CLIENT_XACT_UPDATE,
	AUCTION_CLIENT_SLASHCMD,
	AUCTION_CLIENT_DATAOK,
	AUCTION_CLIENT_ACCOUNT_SHARDXFER,
	AUCTION_CLIENT_PURGE_FAKE,
	AUCTION_CLIENT_SET_LOG_LEVELS,
	AUCTION_CLIENT_TEST_LOGS,
} AuctionClientMsgs;


typedef enum AuctionServerMsg
{
	AUCTION_SVR_CONNECT = COMM_MAX_CMD,
	AUCTION_SVR_SEND_INV,
	AUCTION_SVR_SEND_HISTORYINFO,
	AUCTION_SVR_BATCH_SEND_ITEMINFO,
	AUCTION_SVR_XACT_START,
	AUCTION_SVR_XACT_CMD,
	AUCTION_SVR_XACT_FINALIZE,
	AUCTION_SVR_RELAY_CMD_BYENT,
	AUCTION_SVR_THROTTLE_ON,
	AUCTION_SVR_THROTTLE_OFF,
	AUCTION_SVR_ACCOUNT_SHARDXFER,
} AuctionServerMsg;

// DBServer to AccountServer
typedef enum AccountClientMsgs
{
	ACCOUNT_CLIENT_CONNECT = COMM_MAX_CMD,
	ACCOUNT_CLIENT_SLASHCMD,
	ACCOUNT_CLIENT_REGISTER_ACCOUNT,
	ACCOUNT_CLIENT_LOGOUT_ACCOUNT,
	ACCOUNT_CLIENT_CHARCOUNT_REQUEST,
	ACCOUNT_CLIENT_CHARCOUNT_REPLY,
	ACCOUNT_CLIENT_SLOTCOUNT_REPLY,
	ACCOUNT_CLIENT_SHARDXFER,
	ACCOUNT_CLIENT_RENAME,
	ACCOUNT_CLIENT_SLOT,
	ACCOUNT_CLIENT_SHARD_XFER_TOKEN_CLAIM,
	ACCOUNT_CLIENT_GENERIC_CLAIM,
	ACCOUNT_CLIENT_RESPEC,
	ACCOUNT_CLIENT_INVENTORY_REQUEST,
	ACCOUNT_CLIENT_INVENTORY_CHANGE,
	ACCOUNT_CLIENT_UPDATE_EMAIL_STATS,
	ACCOUNT_CLIENT_VISITORXFER,
	ACCOUNT_CLIENT_CERTIFICATION_TEST,
	ACCOUNT_CLIENT_CERTIFICATION_GRANT,
	ACCOUNT_CLIENT_CERTIFICATION_GRANT_FINISH, // deprecated
	ACCOUNT_CLIENT_CERTIFICATION_CLAIM,
	ACCOUNT_CLIENT_CERTIFICATION_CLAIM_FINISH, // deprecated
	ACCOUNT_CLIENT_CERTIFICATION_REFUND,
	ACCOUNT_CLIENT_SET_INVENTORY,
	ACCOUNT_CLIENT_GET_PLAYNC_AUTH_KEY,
	ACCOUNT_CLIENT_UPDATE_LOG_LEVELS,
	ACCOUNT_CLIENT_TEST_LOGS,
	ACCOUNT_CLIENT_LOYALTY_CHANGE,
	ACCOUNT_CLIENT_LOYALTY_UNSPENT_CHANGE,
	ACCOUNT_CLIENT_AUTH_UPDATE,
	ACCOUNT_CLIENT_MARK_SAVED,
	ACCOUNT_CLIENT_RECOVER_UNSAVED,
	ACCOUNT_CLIENT_TRANSACTION_FINISH,
	ACCOUNT_CLIENT_MULTI_GAME_TRANSACTION,
};

typedef enum AccountServerMsg
{
	ACCOUNT_SVR_CONNECT = COMM_MAX_CMD,
	ACCOUNT_SVR_RELAY_CMD,
	ACCOUNT_SVR_CHARCOUNT_REQUEST,
	ACCOUNT_SVR_CHARCOUNT_REPLY,
	ACCOUNT_SVR_SLOTCOUNT_REQUEST,
	ACCOUNT_SVR_PRODUCT_CATALOG_UPDATE,
	ACCOUNT_SVR_SHARDXFER,
	ACCOUNT_SVR_RENAME,
	ACCOUNT_SVR_SLOT,
	ACCOUNT_SVR_NOTIFYREQUEST,
	ACCOUNT_SVR_NOTIFYTRANSACTION,
	ACCOUNT_SVR_NOTIFYSAVED,
	ACCOUNT_SVR_INVENTORY,
	ACCOUNT_SVR_RESPEC,
	ACCOUNT_SVR_DB_HEARTBEAT,
	ACCOUNT_SVR_CERTIFICATION_GRANT_ACK,
	ACCOUNT_SVR_CERTIFICATION_CLAIM_ACK,
	ACCOUNT_SVR_CERTIFICATION_REFUND_ACK,
	ACCOUNT_SVR_CLIENTAUTH,
	ACCOUNT_SVR_PLAYNC_AUTH_KEY,
	ACCOUNT_SVR_FORCE_LOGOUT,
	ACCOUNT_SVR_MULTI_GAME_TRANSACTION_ACK,
	ACCOUNT_SVR_MULTI_GAME_TRANSACTION_COMPLETED,
};

typedef enum ShardXferStep
{
	SHARDXFER_VALIDATE_SRC,
	SHARDXFER_VALIDATE_DST,
	SHARDXFER_FULFILL_COPY_SRC,
	SHARDXFER_FULFILL_COPY_DST,
	SHARDXFER_FULFILL_COMMIT_SRC,
	SHARDXFER_FULFILL_COMMIT_DST,
	SHARDXFER_FULFILL_COMMIT_RECOVERY,
	SHARDXFER_FULFILL_XFER_JUMP,
} ShardXferStep;

typedef enum MissionClientMsgs
{
	MISSION_CLIENT_CONNECT = COMM_MAX_CMD,
	MISSION_CLIENT_DATAOK,
	MISSION_CLIENT_COMMAND,
#define MISSIONSERVER_CLIENT_COMMAND MISSION_CLIENT_COMMAND
	MISSION_CLIENT_SUBSCRIBE,		// deprecated
	MISSION_CLIENT_PUBLISHARC,
	MISSION_CLIENT_UNPUBLISHARC,	// deprecated
	MISSION_CLIENT_SEARCHPAGE,
	MISSION_CLIENT_ARCINFO,
	MISSION_CLIENT_ARCDATA,
	MISSION_CLIENT_INVENTORY,
	MISSION_CLIENT_CLAIM_TICKETS,
	MISSION_CLIENT_NOT_PRESENT,
	MISSION_CLIENT_BUY_ITEM,
	MISSION_CLIENT_ERROR,
	MISSION_CLIENT_REQUESTALL,
	MISSION_CLIENT_BANSTATUS,
	MISSION_CLIENT_ARCDATA_OTHERUSER,
	MISSION_CLIENT_SET_LOG_LEVELS,
	MISSION_CLIENT_TEST_LOG_LEVELS,
} MissionClientMsgs;

typedef enum MissionServerMsgs
{
	MISSION_SERVER_CONNECT = COMM_MAX_CMD,
	MISSION_SERVER_MESSAGEENTITY,
	MISSION_SERVER_SEARCHPAGE,
	MISSION_SERVER_ARCINFO,
	MISSION_SERVER_ARCDATA,
	MISSION_SERVER_SENDPETITION,
	MISSION_SERVER_COMMENT,
	MISSION_SERVER_INVENTORY,
	MISSION_SERVER_CLAIM_TICKETS,
	MISSION_SERVER_ITEM_BOUGHT,
	MISSION_SERVER_OVERFLOW_GRANTED,
	MISSION_SERVER_ALLARCS,
	MISSION_SERVER_BANSTATUS,
	MISSION_SERVER_ARCDATA_OTHERUSER,
} MissionServerMsgs;

enum
{
	BEACON2DB_BEACONSERVER_STATUS = COMM_MAX_CMD,
};

#endif
